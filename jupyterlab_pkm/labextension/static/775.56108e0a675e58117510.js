"use strict";(self.webpackChunk_jupyterlab_pkm_extension=self.webpackChunk_jupyterlab_pkm_extension||[]).push([[775],{4775:(e,t,n)=>{n.r(t),n.d(t,{default:()=>Z});var o=n(1679),i=n(3319),a=n(3791),r=n(269),l=n(3739),s=n(7789),c=n(5256),d=n(4602);const u=new class{constructor(){this._markdownMode="edit",this._markdownModeChanged=new d.Signal(this),this._isDisposed=!1}get markdownMode(){return this._markdownMode}get markdownModeChanged(){return this._markdownModeChanged}setMarkdownMode(e){this._markdownMode!==e&&(this._markdownMode=e,this._markdownModeChanged.emit(e))}get isDisposed(){return this._isDisposed}dispose(){this._isDisposed||(this._isDisposed=!0,d.Signal.clearData(this))}},p="pkm:toggle-markdown-mode",m="pkm:open-start-file",h={id:"@jupyterlab/pkm-extension:markdown-mode",description:"Global markdown mode toggle and startup file",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,s.IDocumentManager,l.IStateDB,o.ICommandPalette],activate:(e,t,n,i,a,r)=>{console.log("PKM Markdown mode plugin activated"),a.fetch("pkm:markdown-mode").then((e=>{"preview"!==e&&"edit"!==e||u.setMarkdownMode(e)})),e.commands.addCommand(p,{label:"PKM: Toggle Current Markdown File View",execute:async()=>{var a,r,l,s;const c=(()=>{var o,i,a,r;const l=e.shell.currentWidget;if(l&&t.has(l)){if(null===(i=null===(o=null==l?void 0:l.context)||void 0===o?void 0:o.path)||void 0===i?void 0:i.endsWith(".md"))return"edit"}if(l&&n.has(l)){if(null===(r=null===(a=null==l?void 0:l.context)||void 0===a?void 0:a.path)||void 0===r?void 0:r.endsWith(".md"))return"preview"}return"none"})();if("none"===c)return void(0,o.showDialog)({title:"No Markdown File",body:"Please focus a markdown file to toggle its view mode.",buttons:[o.Dialog.okButton()]});const d=e.shell.currentWidget;let u=d,p="";if("edit"===c&&d&&t.has(d)){const e=d;(null===(r=null===(a=null==e?void 0:e.context)||void 0===a?void 0:a.path)||void 0===r?void 0:r.endsWith(".md"))&&(p=e.context.path)}else if("preview"===c&&d&&n.has(d)){const e=d;(null===(s=null===(l=null==e?void 0:e.context)||void 0===l?void 0:l.path)||void 0===s?void 0:s.endsWith(".md"))&&(p=e.context.path)}if(!u||!p)return void console.warn("No valid markdown file found to toggle");const m="edit"===c?"preview":"edit",h="edit"===m?"Editor":"Markdown Preview";try{u&&!u.isDisposed&&u.close(),await new Promise((e=>setTimeout(e,100))),await i.openOrReveal(p,h),console.log(`Toggled ${p} from ${c} to ${m} mode via keyboard`),(0,o.showDialog)({title:"View Mode Changed",body:`Switched to ${m} mode for ${p.split("/").pop()}`,buttons:[o.Dialog.okButton()]})}catch(e){console.error("Failed to toggle file mode:",e),(0,o.showDialog)({title:"Error",body:"Failed to switch view mode. Please try again.",buttons:[o.Dialog.okButton()]})}}}),e.commands.addCommand(m,{label:"PKM: Open Start File",execute:async()=>{try{const e="edit"===u.markdownMode?"Editor":"Markdown Preview";await i.openOrReveal("start.md",e)}catch(e){console.log("start.md not found, creating it...");try{await i.services.contents.save("start.md",{type:"file",format:"text",content:"# Welcome to Your PKM System\n\nThis is your starting note. Try creating wikilinks:\n\n- [[My First Note]] - Creates a new note\n- [[https://example.com|External Link]] - Links to external sites\n\n## Features:\n- **Wikilinks**: Use [[Note Name]] syntax\n- **Search**: Alt+F to search all notes  \n- **Auto-save**: Your changes are saved automatically\n- **Mode Toggle**: Use the button above or Alt+M to switch between edit and preview modes\n\nStart building your knowledge graph!\n"});const e="edit"===u.markdownMode?"Editor":"Markdown Preview";await i.openOrReveal("start.md",e)}catch(e){console.error("Failed to create start.md:",e)}}}}),r&&(r.addItem({command:p,category:"PKM"}),r.addItem({command:m,category:"PKM"})),e.commands.addKeyBinding({command:p,keys:["Alt M"],selector:"body"});let l=null;const s=()=>{var o,a,r,s;const d=e.shell.currentWidget;let u=!1;if(d&&t.has(d)){u=(null===(a=null===(o=null==d?void 0:d.context)||void 0===o?void 0:o.path)||void 0===a?void 0:a.endsWith(".md"))||!1}else if(d&&n.has(d)){u=(null===(s=null===(r=null==d?void 0:d.context)||void 0===r?void 0:r.path)||void 0===s?void 0:s.endsWith(".md"))||!1}u?(l||(l=(()=>{const o=new c.Widget;o.addClass("pkm-mode-toggle"),o.node.style.cssText="\n        position: fixed;\n        bottom: 20px;\n        left: 20px;\n        width: calc(var(--jp-sidebar-min-width, 240px) - 40px);\n        max-width: 280px;\n        z-index: 1000;\n        background: var(--jp-layout-color0, #ffffff);\n        border: 2px solid var(--jp-brand-color1, #1976d2);\n        border-radius: 8px;\n        padding: 12px;\n        margin: 0;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      ",o.node.innerHTML='\n        <div style="display: flex; flex-direction: column; gap: 8px;">\n          <button id="pkm-mode-btn" style="\n            padding: 10px 12px; \n            border: 2px solid var(--jp-brand-color1, #1976d2); \n            background: var(--jp-brand-color1, #1976d2);\n            color: white;\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 13px;\n            font-weight: 600;\n            transition: all 0.2s ease;\n            width: 100%;\n            text-align: center;\n          ">\n            üìù Edit Mode\n          </button>\n          <div style="display: flex; flex-direction: column; gap: 2px;">\n            <span style="color: var(--jp-ui-font-color1); font-size: 12px; font-weight: 500; text-align: center;">\n              Markdown files will open in edit mode\n            </span>\n            <span style="color: var(--jp-ui-font-color2); font-size: 11px; text-align: center;">\n              Press Alt+M to toggle\n            </span>\n          </div>\n        </div>\n      ';const a=o.node.querySelector("#pkm-mode-btn"),r=o.node.querySelector("span"),l=()=>{var o,i,a,r;const l=e.shell.currentWidget;return l&&t.has(l)&&(null===(i=null===(o=null==l?void 0:l.context)||void 0===o?void 0:o.path)||void 0===i?void 0:i.endsWith(".md"))?"edit":l&&n.has(l)&&(null===(r=null===(a=null==l?void 0:l.context)||void 0===a?void 0:a.path)||void 0===r?void 0:r.endsWith(".md"))?"preview":"none"},s=()=>{const e=l();"edit"===e?(a.innerHTML="üëÅ Switch to Preview",a.style.background="var(--jp-brand-color1, #1976d2)",a.style.borderColor="var(--jp-brand-color1, #1976d2)",r.textContent="Currently viewing in edit mode",a.disabled=!1):"preview"===e?(a.innerHTML="üìù Switch to Edit",a.style.background="var(--jp-warn-color1, #ff9800)",a.style.borderColor="var(--jp-warn-color1, #ff9800)",r.textContent="Currently viewing in preview mode",a.disabled=!1):(a.innerHTML="üìÑ No Markdown File",a.style.background="var(--jp-layout-color3, #ccc)",a.style.borderColor="var(--jp-layout-color3, #ccc)",r.textContent="Focus a markdown file to toggle view",a.disabled=!0)};return a.addEventListener("mouseenter",(()=>{a.style.opacity="0.8"})),a.addEventListener("mouseleave",(()=>{a.style.opacity="1"})),a.addEventListener("click",(async()=>{var o,a,c,d;const u=l();if("none"===u)return;const p=e.shell.currentWidget;let m=p,h="";if("edit"===u&&p&&t.has(p)){const e=p;(null===(a=null===(o=null==e?void 0:e.context)||void 0===o?void 0:o.path)||void 0===a?void 0:a.endsWith(".md"))&&(h=e.context.path)}else if("preview"===u&&p&&n.has(p)){const e=p;(null===(d=null===(c=null==e?void 0:e.context)||void 0===c?void 0:c.path)||void 0===d?void 0:d.endsWith(".md"))&&(h=e.context.path)}if(!m||!h)return void console.warn("No valid markdown file found to toggle");const k="edit"===u?"preview":"edit",g="edit"===k?"Editor":"Markdown Preview";try{r.textContent=`Switching to ${k}...`,r.style.color="var(--jp-brand-color1, #1976d2)",m&&!m.isDisposed&&m.close(),await new Promise((e=>setTimeout(e,100))),await i.openOrReveal(h,g),r.textContent=`Switched to ${k} mode!`,r.style.color="var(--jp-success-color1, #4caf50)",setTimeout((()=>{s()}),1500),console.log(`Toggled ${h} from ${u} to ${k} mode`)}catch(e){console.error("Failed to toggle file mode:",e),r.textContent="Failed to switch mode",r.style.color="var(--jp-error-color1, #f44336)",setTimeout((()=>{s()}),2e3)}})),t.currentChanged.connect(s),n.currentChanged.connect(s),e.shell.currentChanged&&e.shell.currentChanged.connect(s),s(),o})(),document.body.appendChild(l.node),console.log("Created global toggle widget")),l.node.style.display="block"):l&&(l.node.style.display="none")};t.currentChanged.connect(s),n.currentChanged.connect(s),e.shell.currentChanged&&e.shell.currentChanged.connect(s),t.widgetAdded.connect(s),n.widgetAdded.connect(s),setTimeout((async()=>{try{await i.openOrReveal("start.md","Markdown Preview")}catch(e){console.log("start.md not found on startup, creating it...");try{await i.services.contents.save("start.md",{type:"file",format:"text",content:"# Welcome to Your PKM System\n\nThis is your starting note. Try creating wikilinks:\n\n- [[My First Note]] - Creates a new note\n- [[https://example.com|External Link]] - Links to external sites\n\n## Features:\n- **Wikilinks**: Use [[Note Name]] syntax\n- **Search**: Alt+F to search all notes  \n- **Auto-save**: Your changes are saved automatically\n- **Mode Toggle**: Use the button above or Alt+M to switch between edit and preview modes\n\nStart building your knowledge graph!\n"}),await i.openOrReveal("start.md","Markdown Preview")}catch(e){console.error("Failed to create start.md:",e)}}}),1e3)}};var k=n(9134);function g(e,t){const n=function(){const e=document.createElement("div");return e.className="pkm-autocomplete-dropdown",e.style.cssText="\n    position: absolute;\n    background: var(--jp-layout-color1);\n    border: 1px solid var(--jp-border-color1);\n    border-radius: 4px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    max-height: 200px;\n    overflow-y: auto;\n    z-index: 1000;\n    display: none;\n    font-family: var(--jp-code-font-family);\n    font-size: var(--jp-code-font-size);\n  ",document.body.appendChild(e),e}();let o=null,i=0,a=[],r=[],l=0,s=!1,c=0;function d(){n.querySelectorAll(".pkm-autocomplete-item").forEach(((e,t)=>{const n=e.querySelector("span");n&&(n.style.fontWeight=t===i?"bold":"normal"),e.style.backgroundColor=t===i?"var(--jp-brand-color3)":"transparent",t===i&&e.scrollIntoView({behavior:"smooth",block:"nearest"})}))}function u(e){if(o){try{const t=o.getCursorPosition(),n=o.model,i=n.sharedModel.getSource(),a=i.split("\n"),r=(a[t.line]||"").substring(0,t.column),l=r.lastIndexOf("[[");if(-1!==l){const s=l+2,c=e.name+"]]";let d=0;for(let e=0;e<t.line;e++)d+=a[e].length+1;const u=d+s,p=d+t.column;console.log("Inserting suggestion:",{file:e.name,line:t.line,column:t.column,matchStartOnLine:s,absoluteMatchStart:u,absoluteCursorPos:p,replacement:c,lastOpenBracket:l,beforeCursorOnLine:r});const m=i.substring(0,u)+c+i.substring(p);n.sharedModel.setSource(m);const h=t.column-s,k=t.column+c.length-h,g={line:t.line,column:k};o.setCursorPosition(g),console.log("Insertion completed")}else console.warn("No wikilink [[ found for insertion")}catch(e){console.error("Error inserting suggestion:",e)}n.style.display="none",s=!1}else console.warn("No current editor for insertion")}document.addEventListener("click",(e=>{n.contains(e.target)||(n.style.display="none",s=!1)})),document.addEventListener("keydown",(e=>{if("none"!==n.style.display&&s&&o)switch(e.key){case"ArrowDown":e.preventDefault(),e.stopPropagation(),i=Math.min(i+1,a.length-1),d();break;case"ArrowUp":e.preventDefault(),e.stopPropagation(),i=Math.max(i-1,0),d();break;case"Enter":case"Tab":a.length>0&&a[i]&&(e.preventDefault(),e.stopPropagation(),u(a[i]));break;case"Escape":e.preventDefault(),e.stopPropagation(),n.style.display="none",s=!1}}),!0),e.widgetAdded.connect((async(d,p)=>{if(!p.context.path.endsWith(".md"))return;const m=p.content.editor,h=m.model;p.disposed.connect((()=>{o===m&&(n.style.display="none",o=null,s=!1)})),h.sharedModel.changed.connect((async()=>{const d=e.currentWidget;if(!d||d!==p)return;o=m;const k=m.getCursorPosition(),g=k.line,f=k.column,y=(h.sharedModel.getSource().split("\n")[g]||"").substring(0,f),x=y.lastIndexOf("[[");if(-1===x)return n.style.display="none",void(s=!1);const w=y.substring(x);if(w.includes("]]"))return n.style.display="none",void(s=!1);const b=w.substring(2);if(b.includes("|"))return n.style.display="none",void(s=!1);s=!0,c=x,console.log("Wikilink context detected:",{prefix:b,beforeCursorOnLine:y,lastOpenBracket:x,wikilinkStartColumn:c,textAfterLastOpen:w,line:g,column:f});const v=await async function(){const e=Date.now();return(e-l>5e3||0===r.length)&&(console.log("Refreshing file cache..."),r=await async function(e){const t=e.services.contents,n=[];return await async function e(o){try{const i=await t.get(o,{content:!0});if("directory"!==i.type||!i.content)return;for(const t of i.content)if("file"===t.type||"notebook"===t.type)if(t.name.endsWith(".md")){const e=t.name.slice(0,-3);n.push({name:e,path:t.path,type:"md"})}else t.name.endsWith(".ipynb")&&n.push({name:t.name,path:t.path,type:"ipynb"});else"directory"===t.type&&await e(t.path)}catch(e){console.error(`Error collecting files from ${o}:`,e)}}(""),n}(t),l=e,console.log(`Found ${r.length} linkable files:`,r.map((e=>`${e.name} (${e.type})`)))),r}();a=v.filter((e=>e.name.toLowerCase().includes(b.toLowerCase()))).sort(((e,t)=>{const n=e.name.toLowerCase().startsWith(b.toLowerCase()),o=t.name.toLowerCase().startsWith(b.toLowerCase());return n&&!o?-1:!n&&o?1:e.name.localeCompare(t.name)})).slice(0,10),console.log(`Found ${a.length} suggestions for prefix "${b}"`),a.length>0?(i=0,n.innerHTML="",a.forEach(((e,t)=>{const o=document.createElement("div");o.className="pkm-autocomplete-item",o.style.cssText="\n        padding: 8px 12px;\n        cursor: pointer;\n        border-bottom: 1px solid var(--jp-border-color2);\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      ";const a=document.createElement("span");a.textContent=e.name,a.style.fontWeight=t===i?"bold":"normal";const r=document.createElement("span");r.textContent="ipynb"===e.type?"üìì":"üìù",r.style.cssText="\n        font-size: 12px;\n        opacity: 0.7;\n        margin-left: 8px;\n      ",o.appendChild(a),o.appendChild(r),t===i&&(o.style.backgroundColor="var(--jp-brand-color3)"),o.addEventListener("click",(t=>{t.preventDefault(),t.stopPropagation(),console.log("Clicked on suggestion:",e.name),u(e)})),n.appendChild(o)})),n.style.display="block",o&&function(e,t,n){try{const o={line:t.getCursorPosition().line,column:n},i=t.getCoordinateForPosition(o),a=t.host.getBoundingClientRect();if(i&&a){const t=Math.max(0,a.left+(i.left||0)),n=Math.max(0,a.top+(i.top||0));e.style.left=`${t}px`,e.style.top=`${n}px`}}catch(t){console.warn("Failed to position dropdown:",t),e.style.left="100px",e.style.top="100px"}}(n,o,c)):(n.style.display="none",s=!1)}))}))}const f=/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/g,y=new Map;function x(e){const t=[],n=/(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/g;let o;for(;null!==(o=n.exec(e));)t.push({start:o.index,end:o.index+o[0].length});return t}function w(e,t){return t.some((t=>e>=t.start&&e<t.end))}function b(e){var t,n;console.log("parseWikilinks called with text containing:",e.includes("[[project-ideas|My Project Ideas]]")?"target wikilink":"other content");const o=[],i=x(e);let a;for(f.lastIndex=0;null!==(a=f.exec(e));)w(a.index,i)||(console.log("Wikilink parsing:",{fullMatch:a[0],group1:a[1],group2:a[2],target:a[1].trim(),display:null===(t=a[2])||void 0===t?void 0:t.trim()}),o.push({fullMatch:a[0],target:a[1].trim(),display:null===(n=a[2])||void 0===n?void 0:n.trim(),startIndex:a.index,endIndex:a.index+a[0].length}));return o}const v=[".md",".ipynb",".csv",".json",".geojson"];function C(e){for(const t of v)if(e.endsWith(t))return t;return".md"}function $(e){for(const t of v)if(e.endsWith(t))return e.slice(0,-t.length);return e}async function M(e,t){const n=e.services.contents,o=t.includes(".")?t:`${t}.md`;return console.log("Searching for file:",t,"-> target:",o),async function e(t){try{const i=await n.get(t,{content:!0});if("directory"!==i.type||!i.content)return null;console.log(`Searching in directory: ${t||"root"}, found ${i.content.length} items`);for(const t of i.content){if(console.log(`  - ${t.name} (${t.type})`),("file"===t.type||"notebook"===t.type)&&t.name===o)return console.log(`Found match: ${t.path}`),t.path;if("directory"===t.type){const n=await e(t.path);if(n)return n}}}catch(e){console.error(`Error searching directory ${t}:`,e)}return null}("")}const I={id:"@jupyterlab/pkm-extension:wikilinks",description:"Handle wikilinks in markdown files",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,s.IDocumentManager,k.IRenderMimeRegistry],activate:(e,t,n,i,a)=>{console.log("Wikilinks plugin activated"),g(t,i),function(e,t){const n=async(n,i)=>{var a;if(!i.shiftKey)return;const r=n.getCursorPosition(),l=n.model.sharedModel.getSource(),s=l.split("\n");let c=0;for(let e=0;e<r.line;e++)c+=s[e].length+1;c+=r.column;const d=function(e,t){if(w(t,x(e)))return null;const n=b(e);for(const e of n)if(t>=e.startIndex&&t<=e.endIndex)return e;return null}(l,c);if(!d)return;i.preventDefault(),i.stopPropagation(),console.log("Shift+click on wikilink in source:",d.target);const u=await M(t,d.target);if(u){let e;u.endsWith(".md")&&(e="Editor"),await t.openOrReveal(u,e)}else(await(0,o.showDialog)({title:"Create New Note",body:`Create new note "${d.target}"?`,buttons:[o.Dialog.cancelButton(),o.Dialog.okButton({label:"Create"})]})).button.accept&&await async function(e,t,n){const o=n?n.substring(0,n.lastIndexOf("/")):"",i=C(t),a=$(t),r=t.includes(".")?t:`${t}${i}`,l=o?`${o}/${r}`:r;if(console.log("Creating new file at:",l),".ipynb"===i)try{if(await e.createNew(l,"notebook"))return void console.log("Created notebook successfully:",l)}catch(e){console.error("Failed to create notebook with factory:",e)}let s,c="text";switch(i){case".ipynb":s=JSON.stringify({cells:[],metadata:{kernelspec:{display_name:"Python 3",language:"python",name:"python3"}},nbformat:4,nbformat_minor:4},null,2),c="json";break;case".json":s=JSON.stringify({name:a,description:"Description here"},null,2),c="json";break;case".geojson":s=JSON.stringify({type:"FeatureCollection",features:[]},null,2),c="json";break;case".csv":s="name,value\nexample,1\n";break;default:s=`# ${a}\n\n`}await e.services.contents.save(l,{type:"file",format:c,content:s}),await e.openOrReveal(l,"Editor")}(t,d.target,(null===(a=e.currentWidget)||void 0===a?void 0:a.context.path)||"")};e.widgetAdded.connect(((e,t)=>{if(t.context.path.endsWith(".md")){const e=t.content.editor;e.host.addEventListener("click",(t=>{n(e,t)}))}})),e.forEach((e=>{if(e.context.path.endsWith(".md")){const t=e.content.editor;t.host.addEventListener("click",(e=>{n(t,e)}))}}))}(t,i);const r=a.getFactory("text/markdown");r&&(a.removeMimeType("text/markdown"),a.addFactory({safe:!0,mimeTypes:["text/markdown"],createRenderer:e=>{const a=r.createRenderer(e),l=a.renderModel.bind(a);return a.renderModel=async e=>{if(!e||!e.data)return console.warn("Invalid model structure:",e),l(e);let r;if("string"==typeof e.data)r=e.data;else if(e.data["text/markdown"])r=e.data["text/markdown"];else{if(!e.data["text/plain"])return console.warn("No markdown content found in model:",e),l(e);r=e.data["text/plain"]}const s=b(r);let c=r,d=0;for(const e of s){console.log("Processing wikilink:",e.target);const t=await M(i,e.target);console.log("Found path for",e.target,":",t);const n=e.display||e.target;let o;y.set(n,e.target),t&&y.set(n+"_PATH",t),console.log("Creating wikilink HTML:",{originalTarget:e.target,displayText:n,linkPath:t,"stored in map":y.get(n)}),e.target.startsWith("http://")||e.target.startsWith("https://")?o=`<a href="${e.target}" class="pkm-external-link" target="_blank" rel="noopener noreferrer">${n}</a>`:t?(o=`<a class="pkm-wikilink">${n}</a>`,console.log("Generated HTML for existing file:",o)):(o=`<a class="pkm-wikilink pkm-wikilink-broken">${n}</a>`,console.log("Generated HTML for non-existing file:",o));const a=e.startIndex+d,r=e.endIndex+d;c=c.slice(0,a)+o+c.slice(r),d+=o.length-e.fullMatch.length}const p={...e,data:"string"==typeof e.data?{"text/markdown":c}:{...e.data,"text/markdown":c},metadata:e.metadata||{},trusted:void 0===e.trusted||e.trusted};await l(p),setTimeout((()=>{if(!a.node||!a.node.isConnected)return void console.warn("Renderer node is not connected to DOM");const e=a.node.querySelectorAll("a"),r=[];e.forEach((e=>{const t=e.getAttribute("href"),n=e.getAttribute("commandlinker-args");(e.classList.contains("pkm-wikilink")||e.hasAttribute("data-wikilink")||e.hasAttribute("data-target")||e.hasAttribute("data-path")||t&&t.startsWith("pkm-wikilink:")||n&&n.includes('"path"'))&&r.push(e)})),console.log(`Found ${r.length} wikilinks in rendered content`),r.forEach((e=>{var a;console.log("Setting up click handler for link:",{outerHTML:e.outerHTML,attributes:Array.from(e.attributes).map((e=>`${e.name}="${e.value}"`)),textContent:e.textContent});const r=e.cloneNode(!0);null===(a=e.parentNode)||void 0===a||a.replaceChild(r,e),r.addEventListener("click",(async e=>{var a;e.preventDefault(),e.stopPropagation();try{const l=(null===(a=r.textContent)||void 0===a?void 0:a.trim())||"";console.log("Click handler - displayText:",l,"shiftKey:",e.shiftKey);const s=y.get(l)||"",c=y.get(l+"_PATH")||"";console.log("Click handler - lookup results:",{displayText:l,targetName:s,path:c,"map size":y.size}),console.log("Wikilink clicked:",{path:c,targetName:s,displayText:l,classList:r.classList.toString()});if(r.classList.contains("pkm-wikilink-broken")){if(!s||""===s.trim())return void console.error("Target name is undefined for broken wikilink",{element:r,classList:r.classList.toString(),text:r.textContent,href:r.getAttribute("href"),allAttributes:Array.from(r.attributes).map((e=>`${e.name}="${e.value}"`)).join(" ")});if((await(0,o.showDialog)({title:"Create New Note",body:`Create new note "${s}"?`,buttons:[o.Dialog.cancelButton(),o.Dialog.okButton({label:"Create"})]})).button.accept){const e=n.currentWidget||t.currentWidget,o=(null==e?void 0:e.context.path)||"",a=o?o.substring(0,o.lastIndexOf("/")):"",r=C(s),l=$(s),c=s.includes(".")?s:`${s}${r}`,d=a?`${a}/${c}`:c;if(console.log("Creating new file at:",d),".ipynb"===r)try{if(await i.createNew(d,"notebook"))return void console.log("Created notebook successfully:",d)}catch(e){console.error("Failed to create notebook with factory, trying manual creation:",e)}let p,m,h="text";switch(r){case".ipynb":p=JSON.stringify({cells:[],metadata:{kernelspec:{display_name:"Python 3",language:"python",name:"python3"}},nbformat:4,nbformat_minor:4},null,2),h="json";break;case".json":p=JSON.stringify({name:l,description:"Description here"},null,2),h="json";break;case".geojson":p=JSON.stringify({type:"FeatureCollection",features:[]},null,2),h="json";break;case".csv":p="name,value\nexample,1\n";break;default:p=`# ${l}\n\n`}await i.services.contents.save(d,{type:"file",format:h,content:p}),".md"===r&&(m="edit"===u.markdownMode?"Editor":"Markdown Preview");const k=await i.openOrReveal(d,m);k&&k.context&&k.context.model.sharedModel.changed.connect((()=>{k.context.model.dirty&&k.context.save()}))}}else if(console.log("Opening existing file. Path from data:",c,"Target:",s,"Shift+click:",e.shiftKey),c&&""!==c&&"#"!==c){let t;c.endsWith(".md")&&(t=e.shiftKey||"edit"===u.markdownMode?"Editor":"Markdown Preview"),await i.openOrReveal(c,t)}else if(s){const t=await M(i,s);if(t){let n;console.log("Found file at:",t),t.endsWith(".md")&&(n=e.shiftKey||"edit"===u.markdownMode?"Editor":"Markdown Preview"),await i.openOrReveal(t,n)}else console.error("Could not find file for target:",s)}else console.error("No path or target name available for existing wikilink")}catch(e){console.error("Error handling wikilink click:",e),console.error("Target element:",r),console.error("All attributes:",Array.from(r.attributes).map((e=>({name:e.name,value:e.value}))))}}))}))}),100)},a}},0));const l=document.createElement("style");l.textContent="\n      .pkm-wikilink {\n        color: #0969da;\n        text-decoration: none;\n        cursor: pointer;\n      }\n      \n      .pkm-wikilink:hover {\n        text-decoration: underline;\n      }\n      \n      .pkm-wikilink-broken {\n        color: #cf222e;\n        text-decoration: none;\n        cursor: pointer;\n      }\n      \n      .pkm-wikilink-broken:hover {\n        text-decoration: underline;\n      }\n    ",document.head.appendChild(l),t.widgetAdded.connect(((e,t)=>{if(t.context.path.endsWith(".md")){let e=null;t.context.model.contentChanged.connect((()=>{e&&clearTimeout(e),e=setTimeout((()=>{t.context.model.dirty&&t.context.save().catch((e=>{console.error("Auto-save failed:",e)}))}),2e3)}))}}))}},T="pkm:search-notes";class E extends c.Panel{constructor(e){super(),this.docManager=e,this.addClass("pkm-search-widget"),this.title.label="Search Notes",this.title.closable=!0,this.createUI()}createUI(){const e=document.createElement("div");e.className="pkm-search-container",this.searchInput=document.createElement("input"),this.searchInput.type="text",this.searchInput.placeholder="Search in all notes...",this.searchInput.className="pkm-search-input";const t=document.createElement("button");t.textContent="Search",t.className="pkm-search-button",e.appendChild(this.searchInput),e.appendChild(t),this.resultsContainer=document.createElement("div"),this.resultsContainer.className="pkm-search-results",this.node.appendChild(e),this.node.appendChild(this.resultsContainer);const n=()=>{const e=this.searchInput.value.trim();e&&this.search(e)};t.addEventListener("click",n),this.searchInput.addEventListener("keypress",(e=>{"Enter"===e.key&&n()}))}async search(e){this.resultsContainer.innerHTML='<div class="pkm-search-loading">Searching...</div>';try{const t=await this.searchInFiles(e);this.displayResults(t)}catch(e){console.error("Search error:",e),this.resultsContainer.innerHTML='<div class="pkm-search-error">Search failed</div>'}}async searchInFiles(e){const t=this.docManager.services.contents,n=[],o=e.toLowerCase();async function i(i){const a=i.split("/").pop(),r=a.toLowerCase(),l=[];r.includes(o)&&l.push({line:0,text:`[Filename match: ${a}]`,matchStart:r.indexOf(o),matchEnd:r.indexOf(o)+e.length});try{const r=await t.get(i,{content:!0});if("file"===r.type&&r.content){if(i.endsWith(".md")){r.content.split("\n").forEach(((t,n)=>{const i=t.toLowerCase();let a=i.indexOf(o);for(;-1!==a;)l.push({line:n+1,text:t,matchStart:a,matchEnd:a+e.length}),a=i.indexOf(o,a+1)}))}else if(i.endsWith(".ipynb")){const t=r.content;t.cells&&Array.isArray(t.cells)&&t.cells.forEach(((t,n)=>{t.source&&(Array.isArray(t.source)?t.source.join(""):t.source).split("\n").forEach(((t,i)=>{const a=t.toLowerCase();let r=a.indexOf(o);for(;-1!==r;)l.push({line:n+1,text:`[Cell ${n+1}] ${t}`,matchStart:r+9+n.toString().length,matchEnd:r+9+n.toString().length+e.length}),r=a.indexOf(o,r+1)}))}))}if(l.length>0){const e=a.endsWith(".md")?a.slice(0,-3):a.endsWith(".ipynb")?a.slice(0,-6):a;n.push({path:i,title:e,matches:l})}}}catch(e){console.error(`Error searching file ${i}:`,e)}}return await async function e(n){try{const o=await t.get(n,{content:!0});if("directory"!==o.type||!o.content)return;const a=[];for(const t of o.content)"file"===t.type&&(t.name.endsWith(".md")||t.name.endsWith(".ipynb"))?a.push(i(t.path)):"directory"===t.type&&a.push(e(t.path));await Promise.all(a)}catch(e){console.error(`Error searching directory ${n}:`,e)}}(""),n}displayResults(e){if(0===e.length)return void(this.resultsContainer.innerHTML='<div class="pkm-search-no-results">No results found</div>');this.resultsContainer.innerHTML="";const t=document.createElement("div");t.className="pkm-search-summary",t.textContent=`Found ${e.length} files with matches`,this.resultsContainer.appendChild(t),e.forEach((e=>{const t=document.createElement("div");t.className="pkm-search-result-item";const n=document.createElement("div");n.className="pkm-search-result-header";const o=document.createElement("a");o.href="#",o.className="pkm-search-result-title",o.textContent=e.title,o.addEventListener("click",(async t=>{t.preventDefault(),await this.docManager.openOrReveal(e.path)})),n.appendChild(o);const i=document.createElement("span");i.className="pkm-search-match-count",i.textContent=`(${e.matches.length} matches)`,n.appendChild(i),t.appendChild(n);const a=document.createElement("ul");if(a.className="pkm-search-match-list",e.matches.slice(0,3).forEach((e=>{const t=document.createElement("li");t.className="pkm-search-match-item";const n=e.text.substring(0,e.matchStart),o=e.text.substring(e.matchStart,e.matchEnd),i=e.text.substring(e.matchEnd);t.innerHTML=`\n          <span class="pkm-search-line-number">Line ${e.line}:</span>\n          <span class="pkm-search-match-text">\n            ${this.escapeHtml(n)}<mark>${this.escapeHtml(o)}</mark>${this.escapeHtml(i)}\n          </span>\n        `,a.appendChild(t)})),e.matches.length>3){const t=document.createElement("li");t.className="pkm-search-more-matches",t.textContent=`...and ${e.matches.length-3} more matches`,a.appendChild(t)}t.appendChild(a),this.resultsContainer.appendChild(t)}))}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}focus(){this.searchInput.focus()}}const j={id:"@jupyterlab/pkm-extension:search",description:"Full-text search for markdown and notebook files",autoStart:!0,requires:[s.IDocumentManager],optional:[o.ICommandPalette],activate:(e,t,n)=>{console.log("Search plugin activated"),e.commands.addCommand(T,{label:"PKM: Search Notes",execute:()=>{const n=new E(t),i=new o.MainAreaWidget({content:n});i.title.label="Search Notes",i.title.closable=!0,e.shell.add(i,"main"),e.shell.activateById(i.id),n.focus()}}),n&&n.addItem({command:T,category:"PKM"}),e.commands.addKeyBinding({command:T,keys:["Alt F"],selector:"body"});const i=document.createElement("style");i.textContent="\n      .pkm-search-widget {\n        padding: 1rem;\n        height: 100%;\n        overflow-y: auto;\n      }\n      \n      .pkm-search-container {\n        display: flex;\n        gap: 0.5rem;\n        margin-bottom: 1rem;\n      }\n      \n      .pkm-search-input {\n        flex: 1;\n        padding: 0.5rem;\n        border: 1px solid var(--jp-border-color1);\n        border-radius: 4px;\n        font-size: 14px;\n      }\n      \n      .pkm-search-button {\n        padding: 0.5rem 1rem;\n        background-color: var(--jp-brand-color1);\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n      }\n      \n      .pkm-search-button:hover {\n        background-color: var(--jp-brand-color2);\n      }\n      \n      .pkm-search-loading,\n      .pkm-search-error,\n      .pkm-search-no-results {\n        text-align: center;\n        padding: 2rem;\n        color: var(--jp-ui-font-color2);\n      }\n      \n      .pkm-search-summary {\n        margin-bottom: 1rem;\n        color: var(--jp-ui-font-color2);\n        font-size: 0.875rem;\n      }\n      \n      .pkm-search-result-item {\n        margin-bottom: 1.5rem;\n        padding: 1rem;\n        background-color: var(--jp-layout-color1);\n        border-radius: 4px;\n      }\n      \n      .pkm-search-result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 0.5rem;\n      }\n      \n      .pkm-search-result-title {\n        font-weight: bold;\n        color: var(--jp-content-link-color);\n        text-decoration: none;\n      }\n      \n      .pkm-search-result-title:hover {\n        text-decoration: underline;\n      }\n      \n      .pkm-search-match-count {\n        font-size: 0.875rem;\n        color: var(--jp-ui-font-color2);\n      }\n      \n      .pkm-search-match-list {\n        list-style: none;\n        padding: 0;\n        margin: 0;\n      }\n      \n      .pkm-search-match-item {\n        margin-bottom: 0.25rem;\n        font-size: 0.875rem;\n        color: var(--jp-ui-font-color1);\n      }\n      \n      .pkm-search-line-number {\n        color: var(--jp-ui-font-color2);\n        margin-right: 0.5rem;\n      }\n      \n      .pkm-search-match-text {\n        font-family: var(--jp-code-font-family);\n      }\n      \n      .pkm-search-match-text mark {\n        background-color: var(--jp-warn-color2);\n        padding: 0 2px;\n      }\n      \n      .pkm-search-more-matches {\n        color: var(--jp-ui-font-color2);\n        font-style: italic;\n      }\n    ",document.head.appendChild(i)}},S="pkm:toggle-backlinks-panel",_="pkm:build-wikilink-index",P="wikilink-index.json";class B extends c.Widget{constructor(e,t,n,o,i){super(),this.app=e,this.docManager=t,this.editorTracker=n,this.markdownTracker=o,this.notebookTracker=i,this._backlinks=[],this._currentPath="",this._wikilinkIndex=null,this._isIndexing=!1,this._indexingPromise=null,this._updateTimeouts=new Map,this.addClass("jp-pkm-backlinks-panel"),this.title.label="Backlinks",this.title.closable=!0,this.title.iconClass="jp-MaterialIcon jp-LinkIcon",this.createUI(),this.initializeIndex(),this.setupTracking(),this.setupFileWatching()}createUI(){this._container=document.createElement("div"),this._container.className="jp-pkm-backlinks-content",this._container.style.cssText="\n      padding: 16px;\n      height: 100%;\n      overflow-y: auto;\n      font-family: var(--jp-ui-font-family);\n    ",this.node.appendChild(this._container),this.showLoadingState()}showLoadingState(){this._container.innerHTML='\n      <div class="jp-pkm-backlinks-loading" style="text-align: center; color: var(--jp-ui-font-color2); margin-top: 40px;">\n        <div style="font-size: 24px; margin-bottom: 16px;">‚è≥</div>\n        <div style="margin-bottom: 8px;">Loading backlinks data...</div>\n        <div style="font-size: 12px;">Checking for existing index.</div>\n      </div>\n    '}showIndexNotBuiltState(){this._container.innerHTML='\n      <div class="jp-pkm-backlinks-empty" style="text-align: center; color: var(--jp-ui-font-color2); margin-top: 40px;">\n        <div style="font-size: 24px; margin-bottom: 16px;">üóÇÔ∏è</div>\n        <div style="margin-bottom: 8px;">Wikilink index not found or not built yet.</div>\n        <div style="font-size: 12px;">Use \'PKM: Build/Rebuild Wikilink Index\' from the command palette.</div>\n      </div>\n    '}async initializeIndex(){if(this._isIndexing)await this._indexingPromise;else{this._isIndexing=!0,this._indexingPromise=this._initializeIndexInternal();try{await this._indexingPromise}finally{this._isIndexing=!1,this._indexingPromise=null}}}async _initializeIndexInternal(){try{console.log("Backlinks: Initializing wikilink index..."),this.showLoadingState(),await this.loadWikilinkIndex(),this._wikilinkIndex?(console.log("Backlinks: Existing index loaded"),setTimeout((()=>{this.handleCurrentChanged()}),100)):(console.log("Backlinks: No existing index found. Index can be built manually or will be built on first relevant file update."),this.showIndexNotBuiltState())}catch(e){console.error("Backlinks: Error initializing index:",e),this.showErrorState()}}async loadWikilinkIndex(){var e;try{console.log("Backlinks: Loading wikilink index from",P);const t=await this.docManager.services.contents.get(P,{content:!0});"string"==typeof t.content&&""!==t.content.trim()?(this._wikilinkIndex=JSON.parse(t.content),console.log("Backlinks: Wikilink index loaded successfully. Last updated:",null===(e=this._wikilinkIndex)||void 0===e?void 0:e.lastUpdated)):(console.log("Backlinks: Wikilink index file is empty or content is not a string."),this._wikilinkIndex=null)}catch(e){e.response&&404===e.response.status?console.log("Backlinks: Wikilink index file not found. This is normal on first run."):console.warn("Backlinks: Could not load wikilink index:",e),this._wikilinkIndex=null}}async buildWikilinkIndex(){console.log("Backlinks: Building wikilink index from scratch...");const e={links:{},backlinks:{},contexts:{},lastUpdated:(new Date).toISOString()};try{let t=[];try{t=await this.getAllMarkdownAndNotebookFiles(".")}catch(e){console.log('Backlinks: Current directory "." failed, trying empty string...'),t=await this.getAllMarkdownAndNotebookFiles("")}console.log(`Backlinks: Found ${t.length} files to index`);for(const n of t)try{const t=n.split("/").pop()||"";console.log(`Backlinks: Indexing ${n}`);const o=await this.docManager.services.contents.get(n,{content:!0});let i="";t.endsWith(".md")?i="string"==typeof o.content?o.content:"":t.endsWith(".ipynb")&&(i=this.extractNotebookText(o.content));const a=this.extractWikilinks(i);if(a.length>0){e.links[n]=a.map((e=>e.target));for(const t of a){const o=this.normalizeTarget(t.target);e.backlinks[o]||(e.backlinks[o]=[]),e.backlinks[o].includes(n)||e.backlinks[o].push(n);const i=`${n}->${o}`;e.contexts[i]={context:t.context,lineNumber:t.lineNumber}}}}catch(e){console.warn(`Backlinks: Error indexing ${n}:`,e)}this._wikilinkIndex=e,await this.saveWikilinkIndex(),console.log("Backlinks: Index built and saved successfully. Last updated:",this._wikilinkIndex.lastUpdated)}catch(e){throw console.error("Backlinks: Error building wikilink index:",e),this._wikilinkIndex=null,e}}normalizeTarget(e){return e.trim().split("|")[0].trim().replace(/\.(md|ipynb)$/i,"")}async saveWikilinkIndex(){if(this._wikilinkIndex)try{await this.docManager.services.contents.save(P,{type:"file",format:"text",content:JSON.stringify(this._wikilinkIndex,null,2)}),console.log("Backlinks: Wikilink index saved successfully to",P)}catch(e){console.error("Backlinks: Error saving wikilink index:",e)}else console.log("Backlinks: Attempted to save index, but index is null. Skipping.")}extractWikilinks(e){const t=[],n=/\[\[([^\]]+)\]\]/g;let o;for(console.log(`Backlinks: Extracting wikilinks from text (${e.length} chars)`),console.log(`Backlinks: Text content preview: "${e.substring(0,200)}"`);null!==(o=n.exec(e));){const n=o[1],[i]=n.split("|"),a=this.normalizeTarget(i),r=e.substring(0,o.index).split("\n").length,l=this.extractContext(e,o.index);console.log(`Backlinks: Found wikilink: [[${n}]] -> normalized target: "${a}"`),t.push({target:a,context:l,lineNumber:r})}return console.log(`Backlinks: Total wikilinks extracted: ${t.length}`),t}async getAllMarkdownAndNotebookFiles(e){var t;const n=[],o=[e,"",".","test-content","./test-content"];for(const e of o)try{console.log(`Backlinks: Trying to scan directory: "${e}"`);const o=await this.docManager.services.contents.get(e,{type:"directory",content:!0});if(console.log(`Backlinks: Response for "${e}":`,{type:o.type,format:o.format,hasContent:!!o.content,contentType:Array.isArray(o.content)?"array":typeof o.content,contentLength:null===(t=o.content)||void 0===t?void 0:t.length}),o.content&&Array.isArray(o.content)){console.log(`Backlinks: Successfully found ${o.content.length} items in "${e}"`);for(const e of o.content)if(console.log(`Backlinks: Processing item: ${e.name} (type: ${e.type})`),"directory"===e.type){console.log(`Backlinks: Recursively searching subdirectory: ${e.path}`);const t=await this.getAllMarkdownAndNotebookFiles(e.path);n.push(...t)}else"file"===e.type&&(e.name.endsWith(".md")||e.name.endsWith(".ipynb"))&&(console.log(`Backlinks: Found target file: ${e.path}`),n.push(e.path));if(o.content.length>0){console.log(`Backlinks: Using directory "${e}" with ${n.length} matching files`);break}}}catch(t){console.log(`Backlinks: Path "${e}" failed:`,(null==t?void 0:t.message)||t);continue}if(0===n.length)try{console.log("Backlinks: No files found, trying to get current directory info...");const e=await this.docManager.services.contents.get("");console.log("Backlinks: Root directory listing:",e),"undefined"!=typeof window&&window.location&&console.log("Backlinks: Current browser location:",window.location.href)}catch(e){console.log("Backlinks: Root directory check failed:",e)}return console.log(`Backlinks: Total files found: ${n.length}`,n),n}setupTracking(){this.editorTracker.currentChanged.connect(this.handleCurrentChanged,this),this.markdownTracker.currentChanged.connect(this.handleCurrentChanged,this),this.notebookTracker.currentChanged.connect(this.handleCurrentChanged,this)}setupFileWatching(){this.docManager.services.contents.fileChanged.connect(this.handleFileChanged,this),this.editorTracker.widgetAdded.connect(((e,t)=>{t.context.model&&t.context.model.contentChanged.connect((()=>{this.debounceFileUpdate(t.context.path)}))})),this.notebookTracker.widgetAdded.connect(((e,t)=>{t.context.model&&t.context.model.contentChanged.connect((()=>{this.debounceFileUpdate(t.context.path)}))}))}debounceFileUpdate(e){const t=this._updateTimeouts.get(e);t&&clearTimeout(t);const n=setTimeout((()=>{this.updateFileInIndex(e),this._updateTimeouts.delete(e)}),2e3);this._updateTimeouts.set(e,n)}async handleFileChanged(e,t){if(!t||!t.newValue||!t.newValue.path)return;const n=t.newValue.path,o=n.split("/").pop()||"";(o.endsWith(".md")||o.endsWith(".ipynb"))&&(console.log(`Backlinks: File changed (saved): ${n}, updating index...`),await this.updateFileInIndex(n))}async updateFileInIndex(e){var t;if(this._wikilinkIndex)try{console.log(`Backlinks: Updating file in index: ${e}`),delete this._wikilinkIndex.links[e];for(const t in this._wikilinkIndex.backlinks)this._wikilinkIndex.backlinks[t]=this._wikilinkIndex.backlinks[t].filter((t=>t!==e)),0===this._wikilinkIndex.backlinks[t].length&&delete this._wikilinkIndex.backlinks[t];for(const t in this._wikilinkIndex.contexts)t.startsWith(`${e}->`)&&delete this._wikilinkIndex.contexts[t];try{const t=await this.docManager.services.contents.get(e,{content:!0}),n=e.split("/").pop()||"";let o="";n.endsWith(".md")?o="string"==typeof t.content?t.content:"":n.endsWith(".ipynb")&&(o=this.extractNotebookText(t.content));const i=this.extractWikilinks(o);if(i.length>0){this._wikilinkIndex.links[e]=i.map((e=>e.target));for(const t of i){const n=this.normalizeTarget(t.target);this._wikilinkIndex.backlinks[n]||(this._wikilinkIndex.backlinks[n]=[]),this._wikilinkIndex.backlinks[n].includes(e)||this._wikilinkIndex.backlinks[n].push(e);const o=`${e}->${n}`;this._wikilinkIndex.contexts[o]={context:t.context,lineNumber:t.lineNumber}}}}catch(t){t.response&&404===t.response.status?console.log(`Backlinks: File ${e} no longer exists (deleted), removed from index.`):console.warn(`Backlinks: Error re-indexing ${e} (might be deleted or unreadable):`,t)}if(this._wikilinkIndex.lastUpdated=(new Date).toISOString(),await this.saveWikilinkIndex(),this._currentPath===e||(this._wikilinkIndex.backlinks[this.normalizeTarget(this._currentPath.split("/").pop()||"")]||[]).includes(e))this.updateBacklinks();else if(this._currentPath){const n=this.normalizeTarget(this._currentPath.split("/").pop()||"");(null===(t=this._wikilinkIndex.links[e])||void 0===t?void 0:t.includes(n))&&this.updateBacklinks()}}catch(t){console.error(`Backlinks: Error updating index for ${e}:`,t)}else{console.log("Backlinks: No index available during file update, building fresh index..."),this.isVisible&&this.showLoadingState();try{await this.buildWikilinkIndex(),this.updateBacklinks()}catch(e){this.showErrorState()}}}async handleCurrentChanged(){this._isIndexing&&await this._indexingPromise;const e=this.app.shell.currentWidget;let t="";if(e){const n=e.context;n&&n.path&&(n.path.endsWith(".md")||n.path.endsWith(".ipynb"))&&(t=n.path)}t!==this._currentPath?(this._currentPath=t,this.updateBacklinks()):!this._container.innerHTML.includes("jp-pkm-backlinks-item")&&this._wikilinkIndex&&this.updateBacklinks()}showEmptyState(){this._container.innerHTML='\n      <div class="jp-pkm-backlinks-empty" style="text-align: center; color: var(--jp-ui-font-color2); margin-top: 40px;">\n        <div style="font-size: 24px; margin-bottom: 16px;">üîó</div>\n        <div style="margin-bottom: 8px;">No backlinks found for this file.</div>\n        <div style="font-size: 12px;">Create [[wikilinks]] to it from other Markdown or Notebook files.</div>\n      </div>\n    '}showErrorState(){this._container.innerHTML='\n      <div class="jp-pkm-backlinks-error" style="text-align: center; color: var(--jp-error-color0); margin-top: 40px;">\n        <div style="font-size: 24px; margin-bottom: 16px;">‚ö†Ô∏è</div>\n        <div style="margin-bottom: 8px;">Error loading or building backlinks.</div>\n        <div style="font-size: 12px;">Check console for details. Try rebuilding the index.</div>\n      </div>\n    '}updateBacklinks(){if(this._backlinks=[],!this._currentPath)return void(this._wikilinkIndex?this.showEmptyState():this.showIndexNotBuiltState());if(!this._wikilinkIndex)return void this.showIndexNotBuiltState();const e=this._currentPath.split("/").pop()||"",t=[e,e.replace(/\.[^/.]+$/,""),e.endsWith(".ipynb")?e.replace(".ipynb",""):null].filter(Boolean),n=new Set,o=new Map;for(const e of t){const t=this._wikilinkIndex.backlinks[this.normalizeTarget(e)]||[];for(const i of t){n.add(i);const t=`${i}->${this.normalizeTarget(e)}`,a=this._wikilinkIndex.contexts[t];a&&!o.has(i)&&o.set(i,a)}}this._backlinks=Array.from(n).map((e=>{const t=o.get(e);return{sourceFile:e,targetFile:this._currentPath,context:(null==t?void 0:t.context)||"Context not available.",lineNumber:(null==t?void 0:t.lineNumber)||1}})),this.renderBacklinks()}extractNotebookText(e){if(!e||!e.cells||!Array.isArray(e.cells))return"";const t=e.cells.filter((e=>"markdown"===e.cell_type)),n=[];for(const e of t){let t="";"string"==typeof e.source?t=e.source:Array.isArray(e.source)?t=e.source.join(""):e.source&&(t=String(e.source)),t.trim()&&n.push(t)}return n.join("\n\n---\n\n")}extractContext(e,t){const n=e.split("\n"),o=e.substring(0,t).split("\n").length-1,i=Math.max(0,o-1),a=Math.min(n.length-1,o+1);return n.slice(i,a+1).join("\n").trim()}renderBacklinks(){if(this._container.innerHTML="",0===this._backlinks.length)return void this.showEmptyState();const e=document.createElement("div");e.className="jp-pkm-backlinks-header",e.textContent=`Backlinks (${this._backlinks.length})`,e.style.cssText="\n      font-size: 1.1rem;\n      font-weight: 600;\n      margin-bottom: 1rem;\n      color: var(--jp-ui-font-color0);\n      border-bottom: 1px solid var(--jp-border-color1);\n      padding-bottom: 0.5rem;\n    ",this._container.appendChild(e),this._backlinks.forEach((e=>{const t=document.createElement("div");t.className="jp-pkm-backlinks-item",t.style.cssText="\n        margin-bottom: 1rem;\n        padding: 0.75rem;\n        border: 1px solid var(--jp-border-color1);\n        border-radius: 4px;\n        background: var(--jp-layout-color1);\n        cursor: pointer;\n        transition: background-color 0.2s;\n      ";const n=document.createElement("div");n.className="jp-pkm-backlinks-filename",n.textContent=e.sourceFile,n.style.cssText="\n        font-weight: 600;\n        color: var(--jp-content-link-color);\n        margin-bottom: 0.5rem;\n        font-size: 0.9rem;\n      ";const o=document.createElement("div");o.className="jp-pkm-backlinks-context",o.textContent=e.context,o.style.cssText="\n        color: var(--jp-ui-font-color1);\n        font-size: 0.85rem;\n        line-height: 1.4;\n        white-space: pre-wrap;\n        max-height: 100px; /* Limit context height */\n        overflow-y: auto; /* Allow scrolling for long contexts */\n      ",t.addEventListener("click",(()=>{this.docManager.openOrReveal(e.sourceFile)})),t.addEventListener("mouseenter",(()=>{t.style.backgroundColor="var(--jp-layout-color2)"})),t.addEventListener("mouseleave",(()=>{t.style.backgroundColor="var(--jp-layout-color1)"})),t.appendChild(n),t.appendChild(o),this._container.appendChild(t)}))}refresh(){this.handleCurrentChanged()}async rebuildIndex(){console.log("Backlinks: Panel widget rebuildIndex called."),this.showLoadingState();try{await this.buildWikilinkIndex(),this.updateBacklinks()}catch(e){this.showErrorState()}}dispose(){for(const e of this._updateTimeouts.values())clearTimeout(e);this._updateTimeouts.clear(),super.dispose()}}const F={id:"@jupyterlab/pkm-extension:backlinks",description:"Display backlinks for markdown and notebook files in a side panel",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,r.INotebookTracker,s.IDocumentManager],optional:[o.ICommandPalette],activate:(e,t,n,i,a,r)=>{console.log("Backlinks plugin activated");let l=null;e.commands.addCommand(S,{label:"PKM: Toggle Backlinks Panel",caption:"Show or hide the backlinks panel",execute:()=>{if(l&&!l.isDisposed)l.isVisible?l.close():e.shell.add(l,"right",{activate:!0});else{const r=new B(e,a,t,n,i);l=new o.MainAreaWidget({content:r}),l.id="pkm-backlinks-panel",e.shell.add(l,"right",{activate:!0})}}}),e.commands.addCommand(_,{label:"PKM: Build/Rebuild Wikilink Index",caption:"Scan all files and (re)build the wikilink index.",execute:async()=>{if(console.log(`Backlinks: Command '${_}' triggered.`),l&&!l.isDisposed&&l.isVisible)console.log("Backlinks: Panel is visible, calling rebuildIndex on existing panel widget."),await l.content.rebuildIndex();else{console.log("Backlinks: Panel not visible/open or not yet created. Building index in background.");const o=new B(e,a,t,n,i);try{await o.buildWikilinkIndex(),console.log("Backlinks: Background index build completed and saved.")}catch(e){console.error("Backlinks: Error during background index build:",e),console.error("Failed to build wikilink index in background.")}finally{o.dispose()}l&&!l.isDisposed&&(console.log("Backlinks: Refreshing existing (possibly hidden) panel to load new index."),await l.content.initializeIndex())}console.log("Wikilink index build/rebuild initiated.")}}),r&&(r.addItem({command:S,category:"PKM"}),r.addItem({command:_,category:"PKM"})),e.commands.addKeyBinding({command:S,keys:["Alt B"],selector:"body"});const s=document.createElement("style");s.textContent="\n      .jp-pkm-backlinks-panel { min-width: 250px; }\n      .jp-pkm-backlinks-content { font-family: var(--jp-ui-font-family); }\n      .jp-pkm-backlinks-header {\n        font-size: 1.1rem; font-weight: 600; margin-bottom: 1rem;\n        color: var(--jp-ui-font-color0); border-bottom: 1px solid var(--jp-border-color1);\n        padding-bottom: 0.5rem;\n      }\n      .jp-pkm-backlinks-empty, .jp-pkm-backlinks-loading, .jp-pkm-backlinks-error {\n        text-align: center; padding: 2rem 1rem; font-style: italic;\n      }\n      .jp-pkm-backlinks-empty, .jp-pkm-backlinks-loading { color: var(--jp-ui-font-color2); }\n      .jp-pkm-backlinks-error { color: var(--jp-error-color0); }\n      .jp-pkm-backlinks-item {\n        margin-bottom: 1rem; padding: 0.75rem; border: 1px solid var(--jp-border-color1);\n        border-radius: 4px; background: var(--jp-layout-color1);\n        cursor: pointer; transition: background-color 0.2s;\n      }\n      .jp-pkm-backlinks-item:hover { background: var(--jp-layout-color2); }\n      .jp-pkm-backlinks-filename {\n        font-weight: 600; color: var(--jp-content-link-color);\n        margin-bottom: 0.5rem; font-size: 0.9rem;\n      }\n      .jp-pkm-backlinks-context {\n        color: var(--jp-ui-font-color1); font-size: 0.85rem;\n        line-height: 1.4; white-space: pre-wrap;\n        max-height: 100px; overflow-y: auto;\n      }\n    ",document.head.appendChild(s)}},N=/!\[\[([^#\]]+)#([^\]|]+)(?:\|([^\]]+))?\]\]/g;async function L(e,t,n){try{console.log(`Attempting to extract heading "${n}" from file: ${t}`);const o=await e.services.contents.get(t,{content:!0});if("file"!==o.type)return console.warn(`File ${t} is not a file type, got: ${o.type}`),null;let i;if("string"!=typeof o.content)return o.content&&"object"==typeof o.content?(console.warn(`File ${t} content is not a string:`,typeof o.content),null):(console.warn(`File ${t} has no content`),null);i=o.content;const a=i.split("\n");console.log(`File has ${a.length} lines`),console.log("Looking for headings in file:",a.slice(0,10).map(((e,t)=>`${t}: ${e}`)));const r=n.trim().toLowerCase();let l=-1,s=0;for(let e=0;e<a.length;e++){const t=a[e].trim().match(/^(#{1,6})\s+(.+)$/);if(t){const o=t[2].trim().toLowerCase();if(console.log(`Found heading at line ${e}: "${t[2]}" (level ${t[1].length})`),o===r){l=e,s=t[1].length,console.log(`Matched heading "${n}" at line ${e}`);break}}}if(-1===l)return console.warn(`Heading "${n}" not found in ${t}`),console.log("Available headings:"),a.forEach(((e,t)=>{const n=e.match(/^(#{1,6})\s+(.+)$/);n&&console.log(`  Line ${t}: ${n[1]} ${n[2]}`)})),null;let c=a.length;for(let e=l+1;e<a.length;e++){const t=a[e].trim().match(/^(#{1,6})\s/);if(t&&t[1].length<=s){c=e;break}}const d=a.slice(l+1,c),u=d.join("\n").trim();return console.log(`Extracted ${d.length} lines of content`),console.log("First 200 chars:",u.substring(0,200)),u}catch(e){return console.error(`Error extracting heading "${n}" from ${t}:`,e),e instanceof SyntaxError&&e.message.includes("JSON.parse")&&console.warn(`File ${t} may not exist or be accessible`),null}}async function W(e,t,n){try{console.log(`Attempting to extract block ID "${n}" from file: ${t}`);const o=await e.services.contents.get(t,{content:!0});if("file"!==o.type)return console.warn(`File ${t} is not a file type, got: ${o.type}`),null;let i;if("string"!=typeof o.content)return o.content&&"object"==typeof o.content?(console.warn(`File ${t} content is not a string:`,typeof o.content),null):(console.warn(`File ${t} has no content`),null);i=o.content;const a=i.split("\n"),r=new RegExp(`\\^${n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}\\s*$`);let l=-1;console.log(`Looking for block ID pattern: ${r}`);for(let e=0;e<a.length;e++)if(r.test(a[e])){l=e,console.log(`Found block ID "${n}" at line ${e}: "${a[e]}"`);break}if(-1===l)return console.warn(`Block ID "${n}" not found in ${t}`),console.log("Available block IDs:"),a.forEach(((e,t)=>{const n=e.match(/\^([a-zA-Z0-9-_]+)\s*$/);n&&console.log(`  Line ${t}: ^${n[1]}`)})),null;let s=l;for(let e=l-1;e>=0;e--){if(""===a[e].trim()){s=e+1;break}0===e&&(s=0)}let c=l;for(let e=l+1;e<a.length;e++){if(""===a[e].trim()){c=e-1;break}e===a.length-1&&(c=e)}const d=a.slice(s,c+1),u=d.map((e=>e.replace(r,"").trimEnd())).join("\n").trim();return console.log(`Extracted block content (${d.length} lines):`,u.substring(0,200)),u}catch(e){return console.error(`Error extracting block ID "${n}" from ${t}:`,e),e instanceof SyntaxError&&e.message.includes("JSON.parse")&&console.warn(`File ${t} may not exist or be accessible`),null}}function A(e){const t=[];for(const n of e)if("stream"===n.output_type){let e="";"string"==typeof n.text?e=n.text:Array.isArray(n.text)&&(e=n.text.join("")),e.trim()&&t.push(`[${n.name||"stream"}]\n${e.trim()}`)}else if("execute_result"===n.output_type||"display_data"===n.output_type){if(n.data)if(n.data["text/plain"]){let e=n.data["text/plain"];Array.isArray(e)&&(e=e.join("")),t.push(`[result]\n${e.trim()}`)}else n.data["text/html"]?t.push(`[html]\n${n.data["text/html"]}`):n.data["image/png"]?t.push("[image: base64 PNG data]"):n.data["image/jpeg"]?t.push("[image: base64 JPEG data]"):t.push(`[data: ${Object.keys(n.data).join(", ")}]`)}else if("error"===n.output_type){const e=n.ename||"Error",o=n.evalue||"";t.push(`[error: ${e}]\n${o}`)}return t.join("\n\n")}async function D(e,t,n){const o=new Date;console.log(`Block embedding - extracting from "${t}" block/heading "${n}"`);const i=await async function(e,t){const n=e.services.contents,o=t.includes(".")?t:`${t}.md`;return console.log("Block embedding - searching for file:",t,"-> target:",o),async function e(t){try{const i=await n.get(t,{content:!0});if("directory"!==i.type||!i.content)return null;console.log(`Block embedding - searching in directory: ${t||"root"}, found ${i.content.length} items`);for(const t of i.content){if(console.log(`  - ${t.name} (${t.type})`),("file"===t.type||"notebook"===t.type)&&t.name===o)return console.log(`Block embedding - found match: ${t.path}`),t.path;if("directory"===t.type){const n=await e(t.path);if(n)return n}}}catch(e){console.error(`Block embedding - error searching directory ${t}:`,e)}return null}("")}(e,t);if(!i)return console.warn(`Block embedding - could not find file: ${t}`),{content:"",title:n,sourceFile:t,blockRef:n,extractedAt:o,found:!1};console.log(`Block embedding - resolved "${t}" to "${i}"`);const a=n.match(/^cell:(\d+)(?::(code|output|markdown|full))?$/);if(a&&i.endsWith(".ipynb")){const r=parseInt(a[1],10),l=a[2]||"full";console.log(`Notebook cell reference detected: cell ${r}, type ${l}`);const s=await async function(e,t,n,o="full"){try{console.log(`Extracting cell ${n} (${o}) from notebook: ${t}`);const i=await e.services.contents.get(t,{content:!0});if("notebook"!==i.type)return console.warn(`File ${t} is not a notebook type, got: ${i.type}`),null;let a;if(a="string"==typeof i.content?JSON.parse(i.content):i.content,!a||!a.cells||!Array.isArray(a.cells))return console.warn(`Invalid notebook structure in ${t}`),null;const r=a.cells;if(n<0||n>=r.length)return console.warn(`Cell index ${n} out of range (0-${r.length-1}) in ${t}`),null;const l=r[n],s=l.execution_count||void 0;console.log(`Found cell ${n}: type=${l.cell_type}, execution_count=${s}`);let c="";if("code"===o||"full"===o&&"code"===l.cell_type){let e="";"string"==typeof l.source?e=l.source:Array.isArray(l.source)&&(e=l.source.join("")),"code"===o?c=e:(c=e,l.outputs&&l.outputs.length>0&&(c+="\n\n\x3c!-- Output --\x3e\n",c+=A(l.outputs)))}else if("output"===o&&"code"===l.cell_type)c=l.outputs&&l.outputs.length>0?A(l.outputs):"(No output)";else{if("markdown"!==o&&"markdown"!==l.cell_type)return console.warn(`Unsupported cell type or extraction type: cell_type=${l.cell_type}, cellType=${o}`),null;"string"==typeof l.source?c=l.source:Array.isArray(l.source)&&(c=l.source.join(""))}return console.log(`Extracted cell content (${c.length} chars):`,c.substring(0,100)),{content:c.trim(),executionCount:s}}catch(e){return console.error(`Error extracting cell ${n} from ${t}:`,e),null}}(e,i,r,l);return s?{content:s.content,title:`Cell ${r}${"full"!==l?`:${l}`:""}`,sourceFile:t,blockRef:n,extractedAt:o,found:!0,isNotebookCell:!0,cellIndex:r,cellType:l,executionCount:s.executionCount}:{content:"",title:`Cell ${r}`,sourceFile:t,blockRef:n,extractedAt:o,found:!1,isNotebookCell:!0,cellIndex:r,cellType:l}}const r=/^[a-z0-9-_]+$/.test(n)&&n.includes("-");let l=null,s=n;return r?(console.log(`"${n}" looks like a block ID, trying block extraction first`),l=await W(e,i,n),null===l&&(console.log("Block ID extraction failed, trying as heading"),l=await L(e,i,n)),s=null!==l?`Block: ${n}`:n):(console.log(`"${n}" looks like a heading, trying heading extraction first`),l=await L(e,i,n),null===l&&(console.log("Heading extraction failed, trying as block ID"),l=await W(e,i,n),s=null!==l?`Block: ${n}`:n)),{content:l||"",title:s,sourceFile:t,blockRef:n,extractedAt:o,found:null!==l}}function O(e,t){const n=e.extractedAt.toLocaleString(),o=t||e.title;if(!e.found)return`\n> **${e.isNotebookCell?"üìì‚ùå":"‚ùå"} ${e.sourceFile}#${e.blockRef}**\n> \n> *${e.isNotebookCell?"Notebook cell":"Block"} not found*\n`;if(e.isNotebookCell){const t=function(e){switch(e){case"code":return"üììüíª";case"output":return"üììüìä";case"markdown":return"üììüìù";default:return"üìì"}}(e.cellType),i=void 0!==e.executionCount?` *[${e.executionCount}]*`:"",a=`**${t} ${e.sourceFile}#${o}**${i} *(üïí ${n})*`;let r="";if("code"===e.cellType||"full"===e.cellType){const t="python";if("full"===e.cellType&&e.content.includes("\x3c!-- Output --\x3e")){const n=e.content.split("\x3c!-- Output --\x3e");r=`\`\`\`${t}\n${n[0].trim()}\n\`\`\`\n\n**Output:**\n\`\`\`\n${n[1].trim()}\n\`\`\``}else r=`\`\`\`${t}\n${e.content.trim()}\n\`\`\``}else r="output"===e.cellType?`\`\`\`\n${e.content.trim()}\n\`\`\``:e.content.trim();return`\n---\n\n${a}\n\n${r}\n\n---\n`}return`\n---\n\n**üìÑ ${e.sourceFile}#${o}** *(üïí ${n})*\n\n${e.content.split("\n").map((e=>e.trim())).filter((e=>e.length>0)).join("\n\n")}\n\n---\n`}const K={id:"@jupyterlab/pkm-extension:block-embedding",description:"Handle block embedding in markdown files",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,s.IDocumentManager,k.IRenderMimeRegistry],optional:[o.ICommandPalette],activate:(e,t,n,i,a,r)=>{console.log("Block embedding plugin activated");const l=a.getFactory("text/markdown");l&&(a.removeMimeType("text/markdown"),a.addFactory({safe:!0,mimeTypes:["text/markdown"],createRenderer:e=>{const t=l.createRenderer(e),n=t.renderModel.bind(t);return t.renderModel=async e=>{let t;if("string"==typeof e.data)t=e.data;else if(e.data["text/markdown"])t=e.data["text/markdown"];else{if(!e.data["text/plain"])return n(e);t=e.data["text/plain"]}const o=function(e){var t;const n=[],o=[],i=/```[\s\S]*?```/g;let a;for(;null!==(a=i.exec(e));)o.push({start:a.index,end:a.index+a[0].length});const r=/`[^`]+`/g;for(;null!==(a=r.exec(e));)o.push({start:a.index,end:a.index+a[0].length});const l=e=>o.some((t=>e>=t.start&&e<t.end));let s;for(N.lastIndex=0;null!==(s=N.exec(e));)l(s.index)||n.push({fullMatch:s[0],sourceFile:s[1].trim(),blockRef:s[2].trim(),displayTitle:null===(t=s[3])||void 0===t?void 0:t.trim(),startIndex:s.index,endIndex:s.index+s[0].length});return n}(t);if(0===o.length)return n(e);console.log(`Found ${o.length} block embeds`);let a=t,r=0;for(const e of o){console.log("Processing embed:",e.sourceFile,"#",e.blockRef);const t=O(await D(i,e.sourceFile,e.blockRef),e.displayTitle),n=e.startIndex+r,o=e.endIndex+r;a=a.slice(0,n)+t+a.slice(o),r+=t.length-e.fullMatch.length}const l={...e,data:"string"==typeof e.data?{"text/markdown":a}:{...e.data,"text/markdown":a},metadata:e.metadata||{},trusted:void 0===e.trusted||e.trusted};return n(l)},t}},0)),e.commands.addCommand("pkm:show-notebook-cell-overview",{label:"PKM: Show Notebook Cell Overview",caption:"Show an overview of all cells in the current notebook",execute:async()=>{var t;const n=e.shell.currentWidget;let r="";if(n&&(null===(t=n.context)||void 0===t?void 0:t.path)){const e=n.context.path;e.endsWith(".ipynb")&&(r=e)}if(!r){const e=prompt("Enter notebook path:","");if(!e)return;r=e}try{const t=await async function(e,t){try{console.log(`Generating cell overview for notebook: ${t}`);const n=await e.services.contents.get(t,{content:!0});if("notebook"!==n.type)return`Error: ${t} is not a notebook file.`;let o;if(o="string"==typeof n.content?JSON.parse(n.content):n.content,!o||!o.cells||!Array.isArray(o.cells))return`Error: Invalid notebook structure in ${t}`;const i=o.cells,a=[];a.push(`# üìì Notebook Cell Overview: ${t}`),a.push(`Total cells: ${i.length}\n`),a.push("| Index | Type | ID | Tags | Execution | Preview |"),a.push("|-------|------|----|----- |-----------|---------|"),i.forEach(((e,t)=>{var n,o,i;const r=e.cell_type||"unknown",l="code"===r?"üíª":"markdown"===r?"üìù":"‚ùì",s=e.id||(null===(n=e.metadata)||void 0===n?void 0:n.id)||"-",c=(null===(o=e.metadata)||void 0===o?void 0:o.tags)||[],d=c.length>0?c.join(", "):"-",u=null!==e.execution_count&&void 0!==e.execution_count?`[${e.execution_count}]`:"-";let p="";if(e.source){let t="";"string"==typeof e.source?t=e.source:Array.isArray(e.source)&&(t=e.source.join(""));const n=(null===(i=t.split("\n")[0])||void 0===i?void 0:i.trim())||"";p=n.length>40?n.substring(0,37)+"...":n,"markdown"===r&&(p=p.replace(/^#+\s*/,"").replace(/\*\*/g,""))}a.push(`| ${t} | ${l} ${r} | \`${s}\` | ${d} | ${u} | ${p} |`)})),a.push("\n## üîó Embedding Examples:"),a.push("```");const r=t.split("/").pop()||t;if(a.push(`![[${r}#cell:0]]        \x3c!-- Full cell 0 --\x3e`),a.push(`![[${r}#cell:0:code]]   \x3c!-- Code only from cell 0 --\x3e`),a.push(`![[${r}#cell:0:output]] \x3c!-- Output only from cell 0 --\x3e`),i.some((e=>{var t,n;return(null===(n=null===(t=e.metadata)||void 0===t?void 0:t.tags)||void 0===n?void 0:n.length)>0}))){const e=i.find((e=>{var t,n;return(null===(n=null===(t=e.metadata)||void 0===t?void 0:t.tags)||void 0===n?void 0:n.length)>0})).metadata.tags[0];a.push(`![[${r}#tag:${e}]]   \x3c!-- Cell with tag "${e}" (future feature) --\x3e`)}return a.push("```"),a.join("\n")}catch(e){return console.error(`Error generating cell overview for ${t}:`,e),`Error: Could not read notebook file ${t}`}}(i,r),n=new c.Widget;n.addClass("pkm-notebook-overview"),n.title.label=`Cell Overview: ${r.split("/").pop()}`,n.title.closable=!0;const l=document.createElement("div");l.style.cssText="\n            padding: 16px;\n            font-family: var(--jp-content-font-family);\n            overflow-y: auto;\n            height: 100%;\n          ";const s=a.createRenderer("text/markdown"),d={"text/markdown":t},u={};let p=!0;const m={data:d,metadata:u,trusted:p,setData:e=>{Object.assign(d,e.data||{}),Object.assign(u,e.metadata||{}),void 0!==e.trusted&&(p=e.trusted)}};s.renderModel(m).then((()=>{l.appendChild(s.node)})),n.node.appendChild(l);const h=new o.MainAreaWidget({content:n});h.title.label=n.title.label,h.title.closable=!0,e.shell.add(h,"main"),e.shell.activateById(h.id)}catch(e){console.error("Error showing notebook cell overview:",e),alert(`Error: Could not read notebook file ${r}`)}}}),r&&r.addItem({command:"pkm:show-notebook-cell-overview",category:"PKM"})}},R=/!\[\[([^#\]]+\.ipynb)#([^\]]+)\]\]/g,z={id:"@jupyterlab/pkm-extension:notebook-embed",description:"Embed notebook cells in markdown files",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,r.INotebookTracker,s.IDocumentManager,k.IRenderMimeRegistry],activate:(e,t,n,o,i,a)=>{console.log("Notebook embed plugin activated");const r=document.createElement("style");r.textContent="\n      .pkm-embedded-cell {\n        margin: 1rem 0;\n        border: 1px solid var(--jp-border-color2);\n        border-radius: 4px;\n        overflow: hidden;\n      }\n      \n      .pkm-embedded-cell-header {\n        background-color: var(--jp-layout-color2);\n        padding: 0.5rem;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        font-size: 0.875rem;\n      }\n      \n      .pkm-embedded-cell-source {\n        color: var(--jp-ui-font-color2);\n      }\n      \n      .pkm-embedded-cell-status {\n        color: var(--jp-ui-font-color3);\n        font-style: italic;\n      }\n      \n      .pkm-embedded-cell-status.modified {\n        color: var(--jp-warn-color1);\n      }\n      \n      .pkm-embedded-cell-content {\n        border: none !important;\n      }\n      \n      .pkm-notebook-embed-placeholder {\n        margin: 1rem 0;\n      }\n      \n      .pkm-embed-loading {\n        padding: 1rem;\n        background-color: var(--jp-layout-color1);\n        border: 1px dashed var(--jp-border-color2);\n        border-radius: 4px;\n        color: var(--jp-ui-font-color2);\n        text-align: center;\n      }\n    ",document.head.appendChild(r),n.widgetAdded.connect(((e,t)=>{t.context.ready.then((()=>{t.content.ready.then((()=>{const e=(t.content.node.textContent||"").match(R);e&&console.log("Found notebook embeds:",e)}))}))}))}},H='\n<svg class="pkm-copy-icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">\n  <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>\n  <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>\n</svg>\n',U='\n<svg class="pkm-copy-icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">\n  <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>\n</svg>\n',q={py:"python",js:"javascript",ts:"typescript",sh:"bash",yml:"yaml",md:"markdown",htm:"html"};function V(e){e.querySelectorAll("pre").forEach((e=>{if(e.querySelector(".pkm-code-copy-btn"))return;const t=e.querySelector("code");if(!t)return;const n=t.textContent||"";if(!n.trim())return;const o=function(e){const t=e.querySelector("code");if(t)return function(e){const t=e.className.split(" ");for(const e of t){if(e.startsWith("language-"))return e.replace("language-","");if(!e.startsWith("hljs-")&&["python","javascript","typescript","bash","shell","r","sql","json","css","html","markdown","yaml"].includes(e.toLowerCase()))return e.toLowerCase()}}(t)}(e);if(o){const t=function(e){const t=document.createElement("div"),n=q[e.toLowerCase()]||e.toLowerCase();return t.className=`pkm-code-language ${n}`,t.textContent=n,t}(o);e.appendChild(t)}const i=function(e){const t=document.createElement("button");return t.className="pkm-code-copy-btn",t.title="Copy code to clipboard",t.innerHTML=`${H}<span>Copy</span>`,t.addEventListener("click",(async n=>{n.preventDefault(),n.stopPropagation();try{await navigator.clipboard.writeText(e),t.innerHTML=`${U}<span>Copied!</span>`,t.classList.add("copied"),setTimeout((()=>{t.innerHTML=`${H}<span>Copy</span>`,t.classList.remove("copied")}),2e3)}catch(n){console.error("Failed to copy code:",n);try{const n=document.createElement("textarea");n.value=e,n.style.position="fixed",n.style.left="-999999px",n.style.top="-999999px",document.body.appendChild(n),n.focus(),n.select(),document.execCommand("copy"),document.body.removeChild(n),t.innerHTML=`${U}<span>Copied!</span>`,t.classList.add("copied"),setTimeout((()=>{t.innerHTML=`${H}<span>Copy</span>`,t.classList.remove("copied")}),2e3)}catch(e){console.error("Fallback copy failed:",e),t.innerHTML=`${H}<span>Failed</span>`,setTimeout((()=>{t.innerHTML=`${H}<span>Copy</span>`}),2e3)}}})),t}(n);e.appendChild(i),"static"===getComputedStyle(e).position&&(e.style.position="relative")}))}const J={id:"@jupyterlab/pkm-extension:code-copy",description:"Add copy functionality to code blocks in markdown",autoStart:!0,requires:[a.IMarkdownViewerTracker,k.IRenderMimeRegistry],activate:(e,t,n)=>{console.log("Code copy plugin activated");const o=n.getFactory("text/markdown");o&&(n.removeMimeType("text/markdown"),n.addFactory({safe:!0,mimeTypes:["text/markdown"],createRenderer:e=>{const t=o.createRenderer(e),n=t.renderModel.bind(t);return t.renderModel=async e=>{const o=await n(e);return t.node&&setTimeout((()=>{V(t.node)}),100),o},t}},1)),t.widgetAdded.connect(((e,t)=>{setTimeout((()=>{t.content.node&&V(t.content.node)}),200)})),t.currentChanged.connect(((e,t)=>{t&&t.content.node&&setTimeout((()=>{V(t.content.node)}),100)})),console.log("Code copy functionality ready")}};var G,Y=n(2140);!function(e){e.showWelcome="pkm:show-welcome"}(G||(G={}));const Q={id:"@jupyterlab/pkm-extension:welcome",description:"Creates PKM documentation and adds help command",autoStart:!0,requires:[o.ICommandPalette,Y.IFileBrowserFactory],activate:async(e,t,n)=>{console.log("PKM Welcome plugin activated"),await async function(e){try{const t=e.serviceManager.contents,n="PKM-Extension-Guide.md";try{return await t.get(n),void console.log("PKM documentation already exists")}catch(e){}await t.save(n,{type:"file",format:"text",content:'# Personal Knowledge Management (PKM) Extension Guide\n\nüéâ **The PKM Extension is now active!** This extension transforms JupyterLab into a powerful note-taking and knowledge management system.\n\n## üöÄ Quick Start\n\n1. Create a new markdown file (e.g., `start.md`)\n2. Start linking notes with wikilinks: `[[Note Name]]`\n3. Use keyboard shortcuts for quick navigation\n4. Embed notebooks and code blocks in your notes\n\n## ‚ú® Key Features\n\n### üìù Wikilinks\n- `[[Note Name]]` - Create links between notes\n- `[[note|display text]]` - Link with custom display text  \n- **Shift + Click** to follow links in editing mode\n- **Ctrl/Cmd + Click** to follow links in preview mode\n- Auto-completion for existing notes when typing `[[`\n\n### üîç Search & Navigation\n- **Alt + F** - Global search across all files\n- **Alt + B** - Show backlinks (what links to current note)\n- Full-text search across markdown files and notebooks\n- Quick navigation between connected notes\n\n### üìä Content Embedding\n- `![[notebook.ipynb#cell-id]]` - Embed specific cells from ipynb files \n- `![[file.md#heading]]` - Embed sections from markdown files\n- Live preview of embedded content\n\nIn ipynb files, you can use the Cell Overview Tool to quickly see the cell id for embedding. Use `PKM: Show Notebook Cell Overview` from the command palette to see all cells with their IDs, types, and previews.\n\n### üìã Code Features\n- **Copy code blocks** from markdown with click-to-copy buttons\n- Syntax highlighting in embedded code\n- **Alt + M** - Toggle markdown preview mode\n\n### üîó Backlinks Panel\n- See all files that link to the current note\n- Automatic backlink detection\n- Navigate between related notes easily\n- FIRST TIME USE: build the backlinks index with the PKM: Build/Rebuild Wikilink Index command\n- Open/close the backlinks panel to refresh the view\n\n## ‚å®Ô∏è Keyboard Shortcuts\n\n| Shortcut | Action |\n|----------|--------|\n| **Alt + F** | Open global search |\n| **Alt + B** | Show backlinks for current file |\n| **Alt + M** | Toggle markdown preview |\n| **Shift + Click** | Follow wikilink in editor |\n| **Click** | Follow wikilink in preview/create new file from link if it doesn\'t already exist |\n\n## üìÅ File Organization Tips\n\n### Recommended Structure\n```\nyour-workspace/\n‚îú‚îÄ‚îÄ start.md              # Your main index/homepage\n‚îú‚îÄ‚îÄ projects/\n‚îÇ   ‚îú‚îÄ‚îÄ project-a.md\n‚îÇ   ‚îî‚îÄ‚îÄ project-b.md\n‚îú‚îÄ‚îÄ notes/\n‚îÇ   ‚îú‚îÄ‚îÄ meeting-notes.md\n‚îÇ   ‚îî‚îÄ‚îÄ research-ideas.md\n‚îú‚îÄ‚îÄ notebooks/\n‚îÇ   ‚îú‚îÄ‚îÄ analysis.ipynb\n‚îÇ   ‚îî‚îÄ‚îÄ data-processing.ipynb\n‚îî‚îÄ‚îÄ PKM-Extension-Guide.md # This guide\n```\n\n### Best Practices\n- Use `start.md` as your main hub/homepage\n- Create meaningful note titles for better wikilink suggestions\n- Link liberally - connections emerge over time\n- Use headings to create linkable sections\n- Embed relevant notebook outputs in your notes\n\n## üîß Advanced Usage\n\n### Block Embedding\nYou can embed specific sections of files, and use a custom title if you want:\n```markdown\n![[research-notes.md#methodology]]\n![[analysis.ipynb#results-cell]]\n![[summary#results|Key Results]]\n```\n\nYou can also indicate \n\n### Cross-referencing Notebooks and Notes\n```markdown\nIn my analysis [[data-analysis.ipynb]], I found that...\n\nThe methodology described in [[research-methods.md]] was applied...\n```\n\n### Creating a Personal Wiki\n- Start with broad topic pages\n- Link to specific project notes\n- Create index pages for different areas\n- Use consistent naming conventions\n\n## üéØ Workflow Examples\n\n### Research Workflow\n1. Create project overview in `project-overview.md`\n2. Link to relevant notebooks: `[[data-collection.ipynb]]`\n3. Reference methodology: `[[research-methods.md]]`\n4. Track progress with linked daily notes\n\n### Learning Workflow  \n1. Create topic index: `[[machine-learning.md]]`\n2. Link to specific concepts: `[[neural-networks.md]]`\n3. Embed code examples: `![[ml-examples.ipynb]]`\n4. Build concept maps with wikilinks\n\n## üÜò Troubleshooting\n\n### Links Not Working?\n- Ensure file exists in workspace\n- Check file extension (.md for markdown, .ipynb for notebooks)\n- Use exact filename in wikilinks\n\n### Search Not Finding Files?\n- Make sure files are saved\n- Check that content is in markdown or notebook format\n- Try alternative search terms\n\n### Backlinks Missing?\n- Save files to update backlink index\n- Ensure wikilinks use correct syntax: `[[filename]]`\n\n## üìö Getting Help\n\n- Access this guide anytime via Command Palette: "PKM: Open Documentation"\n- All PKM commands available in Command Palette (Cmd/Ctrl + Shift + P)\n- Look for "PKM:" prefix in command palette\n\n---\n\n**Happy note-taking!** üéâ\n\n*This file was automatically created by the PKM Extension. You can edit or delete it as needed.*\n'}),console.log("PKM documentation created: PKM-Extension-Guide.md")}catch(e){console.warn("Could not create PKM documentation:",e)}}(e),e.commands.addCommand(G.showWelcome,{label:"PKM: Open Documentation",execute:async()=>{try{await e.commands.execute("docmanager:open",{path:"PKM-Extension-Guide.md"})}catch(e){console.warn("Could not open PKM documentation:",e),alert('PKM Documentation should be available as "PKM-Extension-Guide.md" in your file browser')}}}),t.addItem({command:G.showWelcome,category:"PKM"})}},Z=[{id:"@jupyterlab/pkm-extension:plugin",description:"Personal Knowledge Management extension for JupyterLab Desktop",autoStart:!0,requires:[o.ICommandPalette,i.IEditorTracker,a.IMarkdownViewerTracker,r.INotebookTracker],activate:(e,t,n,o,i)=>{console.log("üéâ JupyterLab PKM extension activated");const a="pkm:test-full";e.commands.addCommand(a,{label:"PKM: Test Full Extension",execute:()=>{console.log("Full PKM Extension is working!"),alert("Full PKM Extension loaded successfully!")}}),t.addItem({command:a,category:"PKM"})}},Q,h,I,j,F,K,z,J]}}]);