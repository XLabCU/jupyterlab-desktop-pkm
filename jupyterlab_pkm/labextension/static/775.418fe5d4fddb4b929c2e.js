"use strict";(self.webpackChunk_jupyterlab_pkm_extension=self.webpackChunk_jupyterlab_pkm_extension||[]).push([[775],{775:(e,n,t)=>{t.r(n),t.d(n,{default:()=>ee});var o=t(679),i=t(319),a=t(791),r=t(269),l=(t(665),t(739)),s=t(789),c=t(256),d=t(602);const p=new class{constructor(){this._markdownMode="edit",this._markdownModeChanged=new d.Signal(this),this._isDisposed=!1}get markdownMode(){return this._markdownMode}get markdownModeChanged(){return this._markdownModeChanged}setMarkdownMode(e){this._markdownMode!==e&&(this._markdownMode=e,this._markdownModeChanged.emit(e))}get isDisposed(){return this._isDisposed}dispose(){this._isDisposed||(this._isDisposed=!0,d.Signal.clearData(this))}},m="pkm:toggle-markdown-mode",u="pkm:open-start-file",h="pkm:toggle-mode-widget",k="pkm:widget-visibility",g={id:"@jupyterlab/pkm-extension:markdown-mode",description:"Global markdown mode toggle and startup file",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,s.IDocumentManager,l.IStateDB,o.ICommandPalette],activate:(e,n,t,i,a,r)=>{console.log("PKM Markdown mode plugin activated"),a.fetch("pkm:markdown-mode").then((e=>{"preview"!==e&&"edit"!==e||p.setMarkdownMode(e)}));let l=!0;a.fetch(k).then((e=>{"boolean"==typeof e&&(l=e)}));let s=null;const d=()=>{s&&(s.node.style.display="none")},g=()=>{var o,a,r,p;if(!l)return void d();const m=e.shell.currentWidget;let u=!1;if(m&&n.has(m)){u=(null===(a=null===(o=null==m?void 0:m.context)||void 0===o?void 0:o.path)||void 0===a?void 0:a.endsWith(".md"))||!1}else if(m&&t.has(m)){u=(null===(p=null===(r=null==m?void 0:m.context)||void 0===r?void 0:r.path)||void 0===p?void 0:p.endsWith(".md"))||!1}u?(s||(s=(()=>{const o=new c.Widget;o.addClass("pkm-mode-toggle"),o.node.style.cssText="\n       position: fixed;\n       bottom: 20px;\n       left: 20px;\n       width: calc(var(--jp-sidebar-min-width, 240px) - 40px);\n       max-width: 280px;\n       z-index: 1000;\n       background: var(--jp-layout-color0, #ffffff);\n       border: 2px solid var(--jp-brand-color1, #1976d2);\n       border-radius: 8px;\n       padding: 12px;\n       margin: 0;\n       box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n     ",o.node.innerHTML='\n       <div style="display: flex; flex-direction: column; gap: 8px;">\n         <button id="pkm-mode-btn" style="\n           padding: 10px 12px; \n           border: 2px solid var(--jp-brand-color1, #1976d2); \n           background: var(--jp-brand-color1, #1976d2);\n           color: white;\n           border-radius: 6px;\n           cursor: pointer;\n           font-size: 13px;\n           font-weight: 600;\n           transition: all 0.2s ease;\n           width: 100%;\n           text-align: center;\n         ">\n           üìù Edit Mode\n         </button>\n         <div style="display: flex; flex-direction: column; gap: 2px;">\n           <span style="color: var(--jp-ui-font-color1); font-size: 12px; font-weight: 500; text-align: center;">\n             Markdown files will open in edit mode\n           </span>\n           <span style="color: var(--jp-ui-font-color2); font-size: 11px; text-align: center;">\n             Press Alt+M to toggle\n           </span>\n         </div>\n       </div>\n     ';const a=o.node.querySelector("#pkm-mode-btn"),r=o.node.querySelector("span"),l=()=>{var o,i,a,r;const l=e.shell.currentWidget;return l&&n.has(l)&&(null===(i=null===(o=null==l?void 0:l.context)||void 0===o?void 0:o.path)||void 0===i?void 0:i.endsWith(".md"))?"edit":l&&t.has(l)&&(null===(r=null===(a=null==l?void 0:l.context)||void 0===a?void 0:a.path)||void 0===r?void 0:r.endsWith(".md"))?"preview":"none"},s=()=>{const e=l();"edit"===e?(a.innerHTML="üëÅ Switch to Preview",a.style.background="var(--jp-brand-color1, #1976d2)",a.style.borderColor="var(--jp-brand-color1, #1976d2)",r.textContent="Currently viewing in edit mode",a.disabled=!1):"preview"===e?(a.innerHTML="üìù Switch to Edit",a.style.background="var(--jp-warn-color1, #ff9800)",a.style.borderColor="var(--jp-warn-color1, #ff9800)",r.textContent="Currently viewing in preview mode",a.disabled=!1):(a.innerHTML="üìÑ No Markdown File",a.style.background="var(--jp-layout-color3, #ccc)",a.style.borderColor="var(--jp-layout-color3, #ccc)",r.textContent="Focus a markdown file to toggle view",a.disabled=!0)};return a.addEventListener("mouseenter",(()=>{a.style.opacity="0.8"})),a.addEventListener("mouseleave",(()=>{a.style.opacity="1"})),a.addEventListener("click",(async()=>{var o,a,c,d;const p=l();if("none"===p)return;const m=e.shell.currentWidget;let u=m,h="";if("edit"===p&&m&&n.has(m)){const e=m;(null===(a=null===(o=null==e?void 0:e.context)||void 0===o?void 0:o.path)||void 0===a?void 0:a.endsWith(".md"))&&(h=e.context.path)}else if("preview"===p&&m&&t.has(m)){const e=m;(null===(d=null===(c=null==e?void 0:e.context)||void 0===c?void 0:c.path)||void 0===d?void 0:d.endsWith(".md"))&&(h=e.context.path)}if(!u||!h)return void console.warn("No valid markdown file found to toggle");const k="edit"===p?"preview":"edit",g="edit"===k?"Editor":"Markdown Preview";try{r.textContent=`Switching to ${k}...`,r.style.color="var(--jp-brand-color1, #1976d2)",u&&!u.isDisposed&&u.close(),await new Promise((e=>setTimeout(e,100))),await i.openOrReveal(h,g),r.textContent=`Switched to ${k} mode!`,r.style.color="var(--jp-success-color1, #4caf50)",setTimeout((()=>{s()}),1500),console.log(`Toggled ${h} from ${p} to ${k} mode`)}catch(e){console.error("Failed to toggle file mode:",e),r.textContent="Failed to switch mode",r.style.color="var(--jp-error-color1, #f44336)",setTimeout((()=>{s()}),2e3)}})),n.currentChanged.connect(s),t.currentChanged.connect(s),e.shell.currentChanged&&e.shell.currentChanged.connect(s),s(),o})(),document.body.appendChild(s.node),console.log("Created global toggle widget")),s.node.style.display="block"):d()};e.commands.addCommand(m,{label:"PKM: Toggle Current Markdown File View",execute:async()=>{var a,r,l,s;const c=(()=>{var o,i,a,r;const l=e.shell.currentWidget;if(l&&n.has(l)){if(null===(i=null===(o=null==l?void 0:l.context)||void 0===o?void 0:o.path)||void 0===i?void 0:i.endsWith(".md"))return"edit"}if(l&&t.has(l)){if(null===(r=null===(a=null==l?void 0:l.context)||void 0===a?void 0:a.path)||void 0===r?void 0:r.endsWith(".md"))return"preview"}return"none"})();if("none"===c)return void(0,o.showDialog)({title:"No Markdown File",body:"Please focus a markdown file to toggle its view mode.",buttons:[o.Dialog.okButton()]});const d=e.shell.currentWidget;let p=d,m="";if("edit"===c&&d&&n.has(d)){const e=d;(null===(r=null===(a=null==e?void 0:e.context)||void 0===a?void 0:a.path)||void 0===r?void 0:r.endsWith(".md"))&&(m=e.context.path)}else if("preview"===c&&d&&t.has(d)){const e=d;(null===(s=null===(l=null==e?void 0:e.context)||void 0===l?void 0:l.path)||void 0===s?void 0:s.endsWith(".md"))&&(m=e.context.path)}if(!p||!m)return void console.warn("No valid markdown file found to toggle");const u="edit"===c?"preview":"edit",h="edit"===u?"Editor":"Markdown Preview";try{p&&!p.isDisposed&&p.close(),await new Promise((e=>setTimeout(e,100))),await i.openOrReveal(m,h),console.log(`Toggled ${m} from ${c} to ${u} mode via keyboard`),(0,o.showDialog)({title:"View Mode Changed",body:`Switched to ${u} mode for ${m.split("/").pop()}`,buttons:[o.Dialog.okButton()]})}catch(e){console.error("Failed to toggle file mode:",e),(0,o.showDialog)({title:"Error",body:"Failed to switch view mode. Please try again.",buttons:[o.Dialog.okButton()]})}}}),e.commands.addCommand(u,{label:"PKM: Open Start File",execute:async()=>{try{const e="edit"===p.markdownMode?"Editor":"Markdown Preview";await i.openOrReveal("start.md",e),console.log("Opened start.md successfully")}catch(e){console.warn("Could not open start.md:",e),(0,o.showDialog)({title:"File Not Found",body:"Could not find start.md. It should be created automatically when the PKM extension loads.",buttons:[o.Dialog.okButton()]})}}}),e.commands.addCommand(h,{label:"PKM: Toggle Mode Widget Visibility",execute:async()=>{if(s){const e=!("none"!==s.node.style.display);l=e,e?g():d(),await a.save(k,e),console.log("Mode widget "+(e?"enabled":"disabled"))}}}),r&&(r.addItem({command:m,category:"PKM"}),r.addItem({command:u,category:"PKM"}),r.addItem({command:h,category:"PKM"})),e.commands.addKeyBinding({command:m,keys:["Alt M"],selector:"body"}),n.currentChanged.connect(g),t.currentChanged.connect(g),e.shell.currentChanged&&e.shell.currentChanged.connect(g),n.widgetAdded.connect(g),t.widgetAdded.connect(g),setTimeout((async()=>{try{const e=i.services.contents;await e.get("start.md"),await i.openOrReveal("start.md","Markdown Preview"),console.log("Opened start.md on startup")}catch(e){console.log("start.md not available on startup, welcome plugin may still be creating it")}}),2e3)}};var f=t(134);function b(e,n){const t=function(){const e=document.createElement("div");return e.className="pkm-autocomplete-dropdown",e.style.cssText="\n    position: absolute;\n    background: var(--jp-layout-color1);\n    border: 1px solid var(--jp-border-color1);\n    border-radius: 4px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    max-height: 200px;\n    overflow-y: auto;\n    z-index: 1000;\n    display: none;\n    font-family: var(--jp-code-font-family);\n    font-size: var(--jp-code-font-size);\n  ",document.body.appendChild(e),e}();let o=null,i=0,a=[],r=[],l=0,s=!1,c=0;function d(){t.querySelectorAll(".pkm-autocomplete-item").forEach(((e,n)=>{const t=e.querySelector("span");t&&(t.style.fontWeight=n===i?"bold":"normal"),e.style.backgroundColor=n===i?"var(--jp-brand-color3)":"transparent",n===i&&e.scrollIntoView({behavior:"smooth",block:"nearest"})}))}function p(e){if(o){try{const n=o.getCursorPosition(),t=o.model,i=t.sharedModel.getSource(),a=i.split("\n"),r=(a[n.line]||"").substring(0,n.column),l=r.lastIndexOf("[[");if(-1!==l){const s=l+2,c=e.name+"]]";let d=0;for(let e=0;e<n.line;e++)d+=a[e].length+1;const p=d+s,m=d+n.column;console.log("Inserting suggestion:",{file:e.name,line:n.line,column:n.column,matchStartOnLine:s,absoluteMatchStart:p,absoluteCursorPos:m,replacement:c,lastOpenBracket:l,beforeCursorOnLine:r});const u=i.substring(0,p)+c+i.substring(m);t.sharedModel.setSource(u);const h=n.column-s,k=n.column+c.length-h,g={line:n.line,column:k};o.setCursorPosition(g),console.log("Insertion completed")}else console.warn("No wikilink [[ found for insertion")}catch(e){console.error("Error inserting suggestion:",e)}t.style.display="none",s=!1}else console.warn("No current editor for insertion")}document.addEventListener("click",(e=>{t.contains(e.target)||(t.style.display="none",s=!1)})),document.addEventListener("keydown",(e=>{if("none"!==t.style.display&&s&&o)switch(e.key){case"ArrowDown":e.preventDefault(),e.stopPropagation(),i=Math.min(i+1,a.length-1),d();break;case"ArrowUp":e.preventDefault(),e.stopPropagation(),i=Math.max(i-1,0),d();break;case"Enter":case"Tab":a.length>0&&a[i]&&(e.preventDefault(),e.stopPropagation(),p(a[i]));break;case"Escape":e.preventDefault(),e.stopPropagation(),t.style.display="none",s=!1}}),!0),e.widgetAdded.connect((async(d,m)=>{if(!m.context.path.endsWith(".md"))return;const u=m.content.editor,h=u.model;m.disposed.connect((()=>{o===u&&(t.style.display="none",o=null,s=!1)})),h.sharedModel.changed.connect((async()=>{const d=e.currentWidget;if(!d||d!==m)return;o=u;const k=u.getCursorPosition(),g=k.line,f=k.column,b=(h.sharedModel.getSource().split("\n")[g]||"").substring(0,f),y=b.lastIndexOf("[[");if(-1===y)return t.style.display="none",void(s=!1);const w=b.substring(y);if(w.includes("]]"))return t.style.display="none",void(s=!1);const x=w.substring(2);if(x.includes("|"))return t.style.display="none",void(s=!1);s=!0,c=y,console.log("Wikilink context detected:",{prefix:x,beforeCursorOnLine:b,lastOpenBracket:y,wikilinkStartColumn:c,textAfterLastOpen:w,line:g,column:f});const v=await async function(){const e=Date.now();return(e-l>5e3||0===r.length)&&(console.log("Refreshing file cache..."),r=await async function(e){const n=e.services.contents,t=[];return await async function e(o){try{const i=await n.get(o,{content:!0});if("directory"!==i.type||!i.content)return;for(const n of i.content)if("file"===n.type||"notebook"===n.type)if(n.name.endsWith(".md")){const e=n.name.slice(0,-3);t.push({name:e,path:n.path,type:"md"})}else n.name.endsWith(".ipynb")&&t.push({name:n.name,path:n.path,type:"ipynb"});else"directory"===n.type&&await e(n.path)}catch(e){console.error(`Error collecting files from ${o}:`,e)}}(""),t}(n),l=e,console.log(`Found ${r.length} linkable files:`,r.map((e=>`${e.name} (${e.type})`)))),r}();a=v.filter((e=>e.name.toLowerCase().includes(x.toLowerCase()))).sort(((e,n)=>{const t=e.name.toLowerCase().startsWith(x.toLowerCase()),o=n.name.toLowerCase().startsWith(x.toLowerCase());return t&&!o?-1:!t&&o?1:e.name.localeCompare(n.name)})).slice(0,10),console.log(`Found ${a.length} suggestions for prefix "${x}"`),a.length>0?(i=0,t.innerHTML="",a.forEach(((e,n)=>{const o=document.createElement("div");o.className="pkm-autocomplete-item",o.style.cssText="\n        padding: 8px 12px;\n        cursor: pointer;\n        border-bottom: 1px solid var(--jp-border-color2);\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      ";const a=document.createElement("span");a.textContent=e.name,a.style.fontWeight=n===i?"bold":"normal";const r=document.createElement("span");r.textContent="ipynb"===e.type?"üìì":"üìù",r.style.cssText="\n        font-size: 12px;\n        opacity: 0.7;\n        margin-left: 8px;\n      ",o.appendChild(a),o.appendChild(r),n===i&&(o.style.backgroundColor="var(--jp-brand-color3)"),o.addEventListener("click",(n=>{n.preventDefault(),n.stopPropagation(),console.log("Clicked on suggestion:",e.name),p(e)})),t.appendChild(o)})),t.style.display="block",o&&function(e,n,t){try{const o={line:n.getCursorPosition().line,column:t},i=n.getCoordinateForPosition(o),a=n.host.getBoundingClientRect();if(i&&a){const n=Math.max(0,a.left+(i.left||0)),t=Math.max(0,a.top+(i.top||0));e.style.left=`${n}px`,e.style.top=`${t}px`}}catch(n){console.warn("Failed to position dropdown:",n),e.style.left="100px",e.style.top="100px"}}(t,o,c)):(t.style.display="none",s=!1)}))}))}const y=/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/g,w=new Map;function x(e){const n=[],t=/(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/g;let o;for(;null!==(o=t.exec(e));)n.push({start:o.index,end:o.index+o[0].length});return n}function v(e,n){return n.some((n=>e>=n.start&&e<n.end))}function C(e){var n,t;console.log("parseWikilinks called with text containing:",e.includes("[[project-ideas|My Project Ideas]]")?"target wikilink":"other content");const o=[],i=x(e);let a;for(y.lastIndex=0;null!==(a=y.exec(e));)v(a.index,i)||(console.log("Wikilink parsing:",{fullMatch:a[0],group1:a[1],group2:a[2],target:a[1].trim(),display:null===(n=a[2])||void 0===n?void 0:n.trim()}),o.push({fullMatch:a[0],target:a[1].trim(),display:null===(t=a[2])||void 0===t?void 0:t.trim(),startIndex:a.index,endIndex:a.index+a[0].length}));return o}const $=[".md",".ipynb",".csv",".json",".geojson"];function M(e){for(const n of $)if(e.endsWith(n))return n;return".md"}function I(e){for(const n of $)if(e.endsWith(n))return e.slice(0,-n.length);return e}async function j(e,n){const t=e.services.contents,o=n.includes(".")?n:`${n}.md`;return console.log("Searching for file:",n,"-> target:",o),async function e(n){try{const i=await t.get(n,{content:!0});if("directory"!==i.type||!i.content)return null;console.log(`Searching in directory: ${n||"root"}, found ${i.content.length} items`);for(const n of i.content){if(console.log(`  - ${n.name} (${n.type})`),("file"===n.type||"notebook"===n.type)&&n.name===o)return console.log(`Found match: ${n.path}`),n.path;if("directory"===n.type){const t=await e(n.path);if(t)return t}}}catch(e){console.error(`Error searching directory ${n}:`,e)}return null}("")}const T={id:"@jupyterlab/pkm-extension:wikilinks",description:"Handle wikilinks in markdown files",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,s.IDocumentManager,f.IRenderMimeRegistry],activate:(e,n,t,i,a)=>{console.log("Wikilinks plugin activated"),b(n,i),function(e,n){const t=async(t,i)=>{var a;if(!i.shiftKey)return;const r=t.getCursorPosition(),l=t.model.sharedModel.getSource(),s=l.split("\n");let c=0;for(let e=0;e<r.line;e++)c+=s[e].length+1;c+=r.column;const d=function(e,n){if(v(n,x(e)))return null;const t=C(e);for(const e of t)if(n>=e.startIndex&&n<=e.endIndex)return e;return null}(l,c);if(!d)return;i.preventDefault(),i.stopPropagation(),console.log("Shift+click on wikilink in source:",d.target);const p=await j(n,d.target);if(p){let e;p.endsWith(".md")&&(e="Editor"),await n.openOrReveal(p,e)}else(await(0,o.showDialog)({title:"Create New Note",body:`Create new note "${d.target}"?`,buttons:[o.Dialog.cancelButton(),o.Dialog.okButton({label:"Create"})]})).button.accept&&await async function(e,n,t){const o=t?t.substring(0,t.lastIndexOf("/")):"",i=M(n),a=I(n),r=n.includes(".")?n:`${n}${i}`,l=o?`${o}/${r}`:r;if(console.log("Creating new file at:",l),".ipynb"===i)try{if(await e.createNew(l,"notebook"))return void console.log("Created notebook successfully:",l)}catch(e){console.error("Failed to create notebook with factory:",e)}let s,c="text";switch(i){case".ipynb":s=JSON.stringify({cells:[],metadata:{kernelspec:{display_name:"Python 3",language:"python",name:"python3"}},nbformat:4,nbformat_minor:4},null,2),c="json";break;case".json":s=JSON.stringify({name:a,description:"Description here"},null,2),c="json";break;case".geojson":s=JSON.stringify({type:"FeatureCollection",features:[]},null,2),c="json";break;case".csv":s="name,value\nexample,1\n";break;default:s=`# ${a}\n\n`}await e.services.contents.save(l,{type:"file",format:c,content:s}),await e.openOrReveal(l,"Editor")}(n,d.target,(null===(a=e.currentWidget)||void 0===a?void 0:a.context.path)||"")};e.widgetAdded.connect(((e,n)=>{if(n.context.path.endsWith(".md")){const e=n.content.editor;e.host.addEventListener("click",(n=>{t(e,n)}))}})),e.forEach((e=>{if(e.context.path.endsWith(".md")){const n=e.content.editor;n.host.addEventListener("click",(e=>{t(n,e)}))}}))}(n,i);const r=a.getFactory("text/markdown");r&&(a.removeMimeType("text/markdown"),a.addFactory({safe:!0,mimeTypes:["text/markdown"],createRenderer:e=>{const a=r.createRenderer(e),l=a.renderModel.bind(a);return a.renderModel=async e=>{if(!e||!e.data)return console.warn("Invalid model structure:",e),l(e);let r;if("string"==typeof e.data)r=e.data;else if(e.data["text/markdown"])r=e.data["text/markdown"];else{if(!e.data["text/plain"])return console.warn("No markdown content found in model:",e),l(e);r=e.data["text/plain"]}const s=C(r);let c=r,d=0;for(const e of s){console.log("Processing wikilink:",e.target);const n=await j(i,e.target);console.log("Found path for",e.target,":",n);const t=e.display||e.target;let o;w.set(t,e.target),n&&w.set(t+"_PATH",n),console.log("Creating wikilink HTML:",{originalTarget:e.target,displayText:t,linkPath:n,"stored in map":w.get(t)}),e.target.startsWith("http://")||e.target.startsWith("https://")?o=`<a href="${e.target}" class="pkm-external-link" target="_blank" rel="noopener noreferrer">${t}</a>`:n?(o=`<a class="pkm-wikilink">${t}</a>`,console.log("Generated HTML for existing file:",o)):(o=`<a class="pkm-wikilink pkm-wikilink-broken">${t}</a>`,console.log("Generated HTML for non-existing file:",o));const a=e.startIndex+d,r=e.endIndex+d;c=c.slice(0,a)+o+c.slice(r),d+=o.length-e.fullMatch.length}const m={...e,data:"string"==typeof e.data?{"text/markdown":c}:{...e.data,"text/markdown":c},metadata:e.metadata||{},trusted:void 0===e.trusted||e.trusted};await l(m),setTimeout((()=>{if(!a.node||!a.node.isConnected)return void console.warn("Renderer node is not connected to DOM");const e=a.node.querySelectorAll("a"),r=[];e.forEach((e=>{const n=e.getAttribute("href"),t=e.getAttribute("commandlinker-args");(e.classList.contains("pkm-wikilink")||e.hasAttribute("data-wikilink")||e.hasAttribute("data-target")||e.hasAttribute("data-path")||n&&n.startsWith("pkm-wikilink:")||t&&t.includes('"path"'))&&r.push(e)})),console.log(`Found ${r.length} wikilinks in rendered content`),r.forEach((e=>{var a;console.log("Setting up click handler for link:",{outerHTML:e.outerHTML,attributes:Array.from(e.attributes).map((e=>`${e.name}="${e.value}"`)),textContent:e.textContent});const r=e.cloneNode(!0);null===(a=e.parentNode)||void 0===a||a.replaceChild(r,e),r.addEventListener("click",(async e=>{var a;e.preventDefault(),e.stopPropagation();try{const l=(null===(a=r.textContent)||void 0===a?void 0:a.trim())||"";console.log("Click handler - displayText:",l,"shiftKey:",e.shiftKey);const s=w.get(l)||"",c=w.get(l+"_PATH")||"";console.log("Click handler - lookup results:",{displayText:l,targetName:s,path:c,"map size":w.size}),console.log("Wikilink clicked:",{path:c,targetName:s,displayText:l,classList:r.classList.toString()});if(r.classList.contains("pkm-wikilink-broken")){if(!s||""===s.trim())return void console.error("Target name is undefined for broken wikilink",{element:r,classList:r.classList.toString(),text:r.textContent,href:r.getAttribute("href"),allAttributes:Array.from(r.attributes).map((e=>`${e.name}="${e.value}"`)).join(" ")});if((await(0,o.showDialog)({title:"Create New Note",body:`Create new note "${s}"?`,buttons:[o.Dialog.cancelButton(),o.Dialog.okButton({label:"Create"})]})).button.accept){const e=t.currentWidget||n.currentWidget,o=(null==e?void 0:e.context.path)||"",a=o?o.substring(0,o.lastIndexOf("/")):"",r=M(s),l=I(s),c=s.includes(".")?s:`${s}${r}`,d=a?`${a}/${c}`:c;if(console.log("Creating new file at:",d),".ipynb"===r)try{if(await i.createNew(d,"notebook"))return void console.log("Created notebook successfully:",d)}catch(e){console.error("Failed to create notebook with factory, trying manual creation:",e)}let m,u,h="text";switch(r){case".ipynb":m=JSON.stringify({cells:[],metadata:{kernelspec:{display_name:"Python 3",language:"python",name:"python3"}},nbformat:4,nbformat_minor:4},null,2),h="json";break;case".json":m=JSON.stringify({name:l,description:"Description here"},null,2),h="json";break;case".geojson":m=JSON.stringify({type:"FeatureCollection",features:[]},null,2),h="json";break;case".csv":m="name,value\nexample,1\n";break;default:m=`# ${l}\n\n`}await i.services.contents.save(d,{type:"file",format:h,content:m}),".md"===r&&(u="edit"===p.markdownMode?"Editor":"Markdown Preview");const k=await i.openOrReveal(d,u);k&&k.context&&k.context.model.sharedModel.changed.connect((()=>{k.context.model.dirty&&k.context.save()}))}}else if(console.log("Opening existing file. Path from data:",c,"Target:",s,"Shift+click:",e.shiftKey),c&&""!==c&&"#"!==c){let n;c.endsWith(".md")&&(n=e.shiftKey||"edit"===p.markdownMode?"Editor":"Markdown Preview"),await i.openOrReveal(c,n)}else if(s){const n=await j(i,s);if(n){let t;console.log("Found file at:",n),n.endsWith(".md")&&(t=e.shiftKey||"edit"===p.markdownMode?"Editor":"Markdown Preview"),await i.openOrReveal(n,t)}else console.error("Could not find file for target:",s)}else console.error("No path or target name available for existing wikilink")}catch(e){console.error("Error handling wikilink click:",e),console.error("Target element:",r),console.error("All attributes:",Array.from(r.attributes).map((e=>({name:e.name,value:e.value}))))}}))}))}),100)},a}},0));const l=document.createElement("style");l.textContent="\n      .pkm-wikilink {\n        color: #0969da;\n        text-decoration: none;\n        cursor: pointer;\n      }\n      \n      .pkm-wikilink:hover {\n        text-decoration: underline;\n      }\n      \n      .pkm-wikilink-broken {\n        color: #cf222e;\n        text-decoration: none;\n        cursor: pointer;\n      }\n      \n      .pkm-wikilink-broken:hover {\n        text-decoration: underline;\n      }\n    ",document.head.appendChild(l),n.widgetAdded.connect(((e,n)=>{if(n.context.path.endsWith(".md")){let e=null;n.context.model.contentChanged.connect((()=>{e&&clearTimeout(e),e=setTimeout((()=>{n.context.model.dirty&&n.context.save().catch((e=>{console.error("Auto-save failed:",e)}))}),2e3)}))}}))}},E="pkm:search-notes";class P extends c.Panel{constructor(e){super(),this.docManager=e,this.addClass("pkm-search-widget"),this.title.label="Search Notes",this.title.closable=!0,this.createUI()}createUI(){const e=document.createElement("div");e.className="pkm-search-container",this.searchInput=document.createElement("input"),this.searchInput.type="text",this.searchInput.placeholder="Search in all notes...",this.searchInput.className="pkm-search-input";const n=document.createElement("button");n.textContent="Search",n.className="pkm-search-button",e.appendChild(this.searchInput),e.appendChild(n),this.resultsContainer=document.createElement("div"),this.resultsContainer.className="pkm-search-results",this.node.appendChild(e),this.node.appendChild(this.resultsContainer);const t=()=>{const e=this.searchInput.value.trim();e&&this.search(e)};n.addEventListener("click",t),this.searchInput.addEventListener("keypress",(e=>{"Enter"===e.key&&t()}))}async search(e){this.resultsContainer.innerHTML='<div class="pkm-search-loading">Searching...</div>';try{const n=await this.searchInFiles(e);this.displayResults(n)}catch(e){console.error("Search error:",e),this.resultsContainer.innerHTML='<div class="pkm-search-error">Search failed</div>'}}async searchInFiles(e){const n=this.docManager.services.contents,t=[],o=e.toLowerCase();async function i(i){const a=i.split("/").pop(),r=a.toLowerCase(),l=[];r.includes(o)&&l.push({line:0,text:`[Filename match: ${a}]`,matchStart:r.indexOf(o),matchEnd:r.indexOf(o)+e.length});try{const r=await n.get(i,{content:!0});if("file"===r.type&&r.content){if(i.endsWith(".md")){r.content.split("\n").forEach(((n,t)=>{const i=n.toLowerCase();let a=i.indexOf(o);for(;-1!==a;)l.push({line:t+1,text:n,matchStart:a,matchEnd:a+e.length}),a=i.indexOf(o,a+1)}))}else if(i.endsWith(".ipynb")){const n=r.content;n.cells&&Array.isArray(n.cells)&&n.cells.forEach(((n,t)=>{n.source&&(Array.isArray(n.source)?n.source.join(""):n.source).split("\n").forEach(((n,i)=>{const a=n.toLowerCase();let r=a.indexOf(o);for(;-1!==r;)l.push({line:t+1,text:`[Cell ${t+1}] ${n}`,matchStart:r+9+t.toString().length,matchEnd:r+9+t.toString().length+e.length}),r=a.indexOf(o,r+1)}))}))}if(l.length>0){const e=a.endsWith(".md")?a.slice(0,-3):a.endsWith(".ipynb")?a.slice(0,-6):a;t.push({path:i,title:e,matches:l})}}}catch(e){console.error(`Error searching file ${i}:`,e)}}return await async function e(t){try{const o=await n.get(t,{content:!0});if("directory"!==o.type||!o.content)return;const a=[];for(const n of o.content)"file"===n.type&&(n.name.endsWith(".md")||n.name.endsWith(".ipynb"))?a.push(i(n.path)):"directory"===n.type&&a.push(e(n.path));await Promise.all(a)}catch(e){console.error(`Error searching directory ${t}:`,e)}}(""),t}displayResults(e){if(0===e.length)return void(this.resultsContainer.innerHTML='<div class="pkm-search-no-results">No results found</div>');this.resultsContainer.innerHTML="";const n=document.createElement("div");n.className="pkm-search-summary",n.textContent=`Found ${e.length} files with matches`,this.resultsContainer.appendChild(n),e.forEach((e=>{const n=document.createElement("div");n.className="pkm-search-result-item";const t=document.createElement("div");t.className="pkm-search-result-header";const o=document.createElement("a");o.href="#",o.className="pkm-search-result-title",o.textContent=e.title,o.addEventListener("click",(async n=>{n.preventDefault(),await this.docManager.openOrReveal(e.path)})),t.appendChild(o);const i=document.createElement("span");i.className="pkm-search-match-count",i.textContent=`(${e.matches.length} matches)`,t.appendChild(i),n.appendChild(t);const a=document.createElement("ul");if(a.className="pkm-search-match-list",e.matches.slice(0,3).forEach((e=>{const n=document.createElement("li");n.className="pkm-search-match-item";const t=e.text.substring(0,e.matchStart),o=e.text.substring(e.matchStart,e.matchEnd),i=e.text.substring(e.matchEnd);n.innerHTML=`\n          <span class="pkm-search-line-number">Line ${e.line}:</span>\n          <span class="pkm-search-match-text">\n            ${this.escapeHtml(t)}<mark>${this.escapeHtml(o)}</mark>${this.escapeHtml(i)}\n          </span>\n        `,a.appendChild(n)})),e.matches.length>3){const n=document.createElement("li");n.className="pkm-search-more-matches",n.textContent=`...and ${e.matches.length-3} more matches`,a.appendChild(n)}n.appendChild(a),this.resultsContainer.appendChild(n)}))}escapeHtml(e){const n=document.createElement("div");return n.textContent=e,n.innerHTML}focus(){this.searchInput.focus()}}const S={id:"@jupyterlab/pkm-extension:search",description:"Full-text search for markdown and notebook files",autoStart:!0,requires:[s.IDocumentManager],optional:[o.ICommandPalette],activate:(e,n,t)=>{console.log("Search plugin activated"),e.commands.addCommand(E,{label:"PKM: Search Notes",execute:()=>{const t=new P(n),i=new o.MainAreaWidget({content:t});i.title.label="Search Notes",i.title.closable=!0,e.shell.add(i,"main"),e.shell.activateById(i.id),t.focus()}}),t&&t.addItem({command:E,category:"PKM"}),e.commands.addKeyBinding({command:E,keys:["Alt F"],selector:"body"});const i=document.createElement("style");i.textContent="\n      .pkm-search-widget {\n        padding: 1rem;\n        height: 100%;\n        overflow-y: auto;\n      }\n      \n      .pkm-search-container {\n        display: flex;\n        gap: 0.5rem;\n        margin-bottom: 1rem;\n      }\n      \n      .pkm-search-input {\n        flex: 1;\n        padding: 0.5rem;\n        border: 1px solid var(--jp-border-color1);\n        border-radius: 4px;\n        font-size: 14px;\n      }\n      \n      .pkm-search-button {\n        padding: 0.5rem 1rem;\n        background-color: var(--jp-brand-color1);\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n      }\n      \n      .pkm-search-button:hover {\n        background-color: var(--jp-brand-color2);\n      }\n      \n      .pkm-search-loading,\n      .pkm-search-error,\n      .pkm-search-no-results {\n        text-align: center;\n        padding: 2rem;\n        color: var(--jp-ui-font-color2);\n      }\n      \n      .pkm-search-summary {\n        margin-bottom: 1rem;\n        color: var(--jp-ui-font-color2);\n        font-size: 0.875rem;\n      }\n      \n      .pkm-search-result-item {\n        margin-bottom: 1.5rem;\n        padding: 1rem;\n        background-color: var(--jp-layout-color1);\n        border-radius: 4px;\n      }\n      \n      .pkm-search-result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 0.5rem;\n      }\n      \n      .pkm-search-result-title {\n        font-weight: bold;\n        color: var(--jp-content-link-color);\n        text-decoration: none;\n      }\n      \n      .pkm-search-result-title:hover {\n        text-decoration: underline;\n      }\n      \n      .pkm-search-match-count {\n        font-size: 0.875rem;\n        color: var(--jp-ui-font-color2);\n      }\n      \n      .pkm-search-match-list {\n        list-style: none;\n        padding: 0;\n        margin: 0;\n      }\n      \n      .pkm-search-match-item {\n        margin-bottom: 0.25rem;\n        font-size: 0.875rem;\n        color: var(--jp-ui-font-color1);\n      }\n      \n      .pkm-search-line-number {\n        color: var(--jp-ui-font-color2);\n        margin-right: 0.5rem;\n      }\n      \n      .pkm-search-match-text {\n        font-family: var(--jp-code-font-family);\n      }\n      \n      .pkm-search-match-text mark {\n        background-color: var(--jp-warn-color2);\n        padding: 0 2px;\n      }\n      \n      .pkm-search-more-matches {\n        color: var(--jp-ui-font-color2);\n        font-style: italic;\n      }\n    ",document.head.appendChild(i)}},_="pkm:toggle-backlinks-panel",B="pkm:build-wikilink-index",W="wikilink-index.json";class N extends c.Widget{constructor(e,n,t,o,i){super(),this.app=e,this.docManager=n,this.editorTracker=t,this.markdownTracker=o,this.notebookTracker=i,this._backlinks=[],this._currentPath="",this._wikilinkIndex=null,this._isIndexing=!1,this._indexingPromise=null,this._updateTimeouts=new Map,this.addClass("jp-pkm-backlinks-panel"),this.title.label="Backlinks",this.title.closable=!0,this.title.iconClass="jp-MaterialIcon jp-LinkIcon",this.createUI(),this.initializeIndex(),this.setupTracking(),this.setupFileWatching()}createUI(){this._container=document.createElement("div"),this._container.className="jp-pkm-backlinks-content",this._container.style.cssText="\n      padding: 16px;\n      height: 100%;\n      overflow-y: auto;\n      font-family: var(--jp-ui-font-family);\n    ",this.node.appendChild(this._container),this.showLoadingState()}showLoadingState(){this._container.innerHTML='\n      <div class="jp-pkm-backlinks-loading" style="text-align: center; color: var(--jp-ui-font-color2); margin-top: 40px;">\n        <div style="font-size: 24px; margin-bottom: 16px;">‚è≥</div>\n        <div style="margin-bottom: 8px;">Loading backlinks data...</div>\n        <div style="font-size: 12px;">Checking for existing index.</div>\n      </div>\n    '}showIndexNotBuiltState(){this._container.innerHTML='\n      <div class="jp-pkm-backlinks-empty" style="text-align: center; color: var(--jp-ui-font-color2); margin-top: 40px;">\n        <div style="font-size: 24px; margin-bottom: 16px;">üóÇÔ∏è</div>\n        <div style="margin-bottom: 8px;">Wikilink index not found or not built yet.</div>\n        <div style="font-size: 12px;">Use \'PKM: Build/Rebuild Wikilink Index\' from the command palette.</div>\n      </div>\n    '}async initializeIndex(){if(this._isIndexing)await this._indexingPromise;else{this._isIndexing=!0,this._indexingPromise=this._initializeIndexInternal();try{await this._indexingPromise}finally{this._isIndexing=!1,this._indexingPromise=null}}}async _initializeIndexInternal(){try{console.log("Backlinks: Initializing wikilink index..."),this.showLoadingState(),await this.loadWikilinkIndex(),this._wikilinkIndex?(console.log("Backlinks: Existing index loaded"),setTimeout((()=>{this.handleCurrentChanged()}),100)):(console.log("Backlinks: No existing index found. Index can be built manually or will be built on first relevant file update."),this.showIndexNotBuiltState())}catch(e){console.error("Backlinks: Error initializing index:",e),this.showErrorState()}}async loadWikilinkIndex(){var e;try{console.log("Backlinks: Loading wikilink index from",W);const n=await this.docManager.services.contents.get(W,{content:!0});"string"==typeof n.content&&""!==n.content.trim()?(this._wikilinkIndex=JSON.parse(n.content),console.log("Backlinks: Wikilink index loaded successfully. Last updated:",null===(e=this._wikilinkIndex)||void 0===e?void 0:e.lastUpdated)):(console.log("Backlinks: Wikilink index file is empty or content is not a string."),this._wikilinkIndex=null)}catch(e){e.response&&404===e.response.status?console.log("Backlinks: Wikilink index file not found. This is normal on first run."):console.warn("Backlinks: Could not load wikilink index:",e),this._wikilinkIndex=null}}async buildWikilinkIndex(){console.log("Backlinks: Building wikilink index from scratch...");const e={links:{},backlinks:{},contexts:{},lastUpdated:(new Date).toISOString()};try{const n=await this.getAllMarkdownAndNotebookFiles();console.log(`Backlinks: Found ${n.length} files to index`);for(const t of n)try{const n=t.split("/").pop()||"";console.log(`Backlinks: Indexing ${t}`);const o=await this.docManager.services.contents.get(t,{content:!0});let i="";n.endsWith(".md")?i="string"==typeof o.content?o.content:"":n.endsWith(".ipynb")&&(i=this.extractNotebookText(o.content));const a=this.extractWikilinks(i);if(a.length>0){e.links[t]=a.map((e=>e.target));for(const n of a){const o=this.normalizeTarget(n.target);e.backlinks[o]||(e.backlinks[o]=[]),e.backlinks[o].includes(t)||e.backlinks[o].push(t);const i=`${t}->${o}`;e.contexts[i]={context:n.context,lineNumber:n.lineNumber}}}}catch(e){console.warn(`Backlinks: Error indexing ${t}:`,e)}this._wikilinkIndex=e,await this.saveWikilinkIndex(),console.log("Backlinks: Index built and saved successfully. Last updated:",this._wikilinkIndex.lastUpdated)}catch(e){throw console.error("Backlinks: Error building wikilink index:",e),this._wikilinkIndex=null,e}}normalizeTarget(e){return e.trim().split("|")[0].trim().replace(/\.(md|ipynb)$/i,"")}async saveWikilinkIndex(){if(this._wikilinkIndex)try{await this.docManager.services.contents.save(W,{type:"file",format:"text",content:JSON.stringify(this._wikilinkIndex,null,2)}),console.log("Backlinks: Wikilink index saved successfully to",W)}catch(e){console.error("Backlinks: Error saving wikilink index:",e)}else console.log("Backlinks: Attempted to save index, but index is null. Skipping.")}extractWikilinks(e){const n=[],t=/\[\[([^\]]+)\]\]/g;let o;for(console.log(`Backlinks: Extracting wikilinks from text (${e.length} chars)`),console.log(`Backlinks: Text content preview: "${e.substring(0,200)}"`);null!==(o=t.exec(e));){const t=o[1],[i]=t.split("|"),a=this.normalizeTarget(i),r=e.substring(0,o.index).split("\n").length,l=this.extractContext(e,o.index);console.log(`Backlinks: Found wikilink: [[${t}]] -> normalized target: "${a}"`),n.push({target:a,context:l,lineNumber:r})}return console.log(`Backlinks: Total wikilinks extracted: ${n.length}`),n}async getAllMarkdownAndNotebookFiles(){const e=[];try{await this.scanDirectory("",e,new Set,0,5)}catch(e){console.warn("Backlinks: Error scanning files:",e)}return console.log(`Backlinks: Total files found: ${e.length}`,e),e}async scanDirectory(e,n,t,o,i){if(o>=i)return void console.log(`Backlinks: Max depth ${i} reached for ${e}`);const a=e.replace(/\/+$/,"")||".";if(t.has(a))console.log(`Backlinks: Already visited ${a}, skipping`);else{t.add(a);try{console.log(`Backlinks: Scanning directory "${e}" at depth ${o}`);const a=await this.docManager.services.contents.get(e,{type:"directory",content:!0});if(!a.content||!Array.isArray(a.content))return void console.log(`Backlinks: No content found in ${e}`);console.log(`Backlinks: Found ${a.content.length} items in "${e}"`);for(const e of a.content)e.name.startsWith(".")||"__pycache__"===e.name||"node_modules"===e.name||("file"===e.type&&(e.name.endsWith(".md")||e.name.endsWith(".ipynb"))?(console.log(`Backlinks: Found target file: ${e.path}`),n.push(e.path)):"directory"===e.type&&await this.scanDirectory(e.path,n,t,o+1,i))}catch(n){console.log(`Backlinks: Error scanning directory "${e}":`,(null==n?void 0:n.message)||n)}}}setupTracking(){this.editorTracker.currentChanged.connect(this.handleCurrentChanged,this),this.markdownTracker.currentChanged.connect(this.handleCurrentChanged,this),this.notebookTracker.currentChanged.connect(this.handleCurrentChanged,this)}setupFileWatching(){this.docManager.services.contents.fileChanged.connect(this.handleFileChanged,this),this.editorTracker.widgetAdded.connect(((e,n)=>{n.context.model&&n.context.model.contentChanged.connect((()=>{this.debounceFileUpdate(n.context.path)}))})),this.notebookTracker.widgetAdded.connect(((e,n)=>{n.context.model&&n.context.model.contentChanged.connect((()=>{this.debounceFileUpdate(n.context.path)}))}))}debounceFileUpdate(e){const n=this._updateTimeouts.get(e);n&&clearTimeout(n);const t=setTimeout((()=>{this.updateFileInIndex(e),this._updateTimeouts.delete(e)}),2e3);this._updateTimeouts.set(e,t)}async handleFileChanged(e,n){if(!n||!n.newValue||!n.newValue.path)return;const t=n.newValue.path,o=t.split("/").pop()||"";(o.endsWith(".md")||o.endsWith(".ipynb"))&&(console.log(`Backlinks: File changed (saved): ${t}, updating index...`),await this.updateFileInIndex(t))}async updateFileInIndex(e){var n;if(this._wikilinkIndex)try{console.log(`Backlinks: Updating file in index: ${e}`),delete this._wikilinkIndex.links[e];for(const n in this._wikilinkIndex.backlinks)this._wikilinkIndex.backlinks[n]=this._wikilinkIndex.backlinks[n].filter((n=>n!==e)),0===this._wikilinkIndex.backlinks[n].length&&delete this._wikilinkIndex.backlinks[n];for(const n in this._wikilinkIndex.contexts)n.startsWith(`${e}->`)&&delete this._wikilinkIndex.contexts[n];try{const n=await this.docManager.services.contents.get(e,{content:!0}),t=e.split("/").pop()||"";let o="";t.endsWith(".md")?o="string"==typeof n.content?n.content:"":t.endsWith(".ipynb")&&(o=this.extractNotebookText(n.content));const i=this.extractWikilinks(o);if(i.length>0){this._wikilinkIndex.links[e]=i.map((e=>e.target));for(const n of i){const t=this.normalizeTarget(n.target);this._wikilinkIndex.backlinks[t]||(this._wikilinkIndex.backlinks[t]=[]),this._wikilinkIndex.backlinks[t].includes(e)||this._wikilinkIndex.backlinks[t].push(e);const o=`${e}->${t}`;this._wikilinkIndex.contexts[o]={context:n.context,lineNumber:n.lineNumber}}}}catch(n){n.response&&404===n.response.status?console.log(`Backlinks: File ${e} no longer exists (deleted), removed from index.`):console.warn(`Backlinks: Error re-indexing ${e} (might be deleted or unreadable):`,n)}if(this._wikilinkIndex.lastUpdated=(new Date).toISOString(),await this.saveWikilinkIndex(),this._currentPath===e||(this._wikilinkIndex.backlinks[this.normalizeTarget(this._currentPath.split("/").pop()||"")]||[]).includes(e))this.updateBacklinks();else if(this._currentPath){const t=this.normalizeTarget(this._currentPath.split("/").pop()||"");(null===(n=this._wikilinkIndex.links[e])||void 0===n?void 0:n.includes(t))&&this.updateBacklinks()}}catch(n){console.error(`Backlinks: Error updating index for ${e}:`,n)}else{console.log("Backlinks: No index available during file update, building fresh index..."),this.isVisible&&this.showLoadingState();try{await this.buildWikilinkIndex(),this.updateBacklinks()}catch(e){this.showErrorState()}}}async handleCurrentChanged(){console.log("Backlinks: handleCurrentChanged called"),this._isIndexing&&await this._indexingPromise;const e=this.app.shell.currentWidget;let n="";if(e){const t=e.context;t&&t.path&&(t.path.endsWith(".md")||t.path.endsWith(".ipynb"))&&(n=t.path)}console.log(`Backlinks: Active widget path: "${n}" (previous: "${this._currentPath}")`),n!==this._currentPath?(this._currentPath=n,console.log("Backlinks: Path changed, updating backlinks for:",n),this.updateBacklinks()):!this._container.innerHTML.includes("jp-pkm-backlinks-item")&&this._wikilinkIndex&&(console.log("Backlinks: Path unchanged but no backlinks shown, refreshing..."),this.updateBacklinks())}showEmptyState(){this._container.innerHTML='\n      <div class="jp-pkm-backlinks-empty" style="text-align: center; color: var(--jp-ui-font-color2); margin-top: 40px;">\n        <div style="font-size: 24px; margin-bottom: 16px;">üîó</div>\n        <div style="margin-bottom: 8px;">No backlinks found for this file.</div>\n        <div style="font-size: 12px;">Create [[wikilinks]] to it from other Markdown or Notebook files.</div>\n      </div>\n    '}showErrorState(){this._container.innerHTML='\n      <div class="jp-pkm-backlinks-error" style="text-align: center; color: var(--jp-error-color0); margin-top: 40px;">\n        <div style="font-size: 24px; margin-bottom: 16px;">‚ö†Ô∏è</div>\n        <div style="margin-bottom: 8px;">Error loading or building backlinks.</div>\n        <div style="font-size: 12px;">Check console for details. Try rebuilding the index.</div>\n      </div>\n    '}updateBacklinks(){if(this._backlinks=[],!this._currentPath)return void(this._wikilinkIndex?this.showEmptyState():this.showIndexNotBuiltState());if(!this._wikilinkIndex)return void this.showIndexNotBuiltState();const e=this._currentPath.split("/").pop()||"",n=[e,e.replace(/\.[^/.]+$/,""),e.endsWith(".ipynb")?e.replace(".ipynb",""):null].filter(Boolean),t=new Set,o=new Map;for(const e of n){const n=this._wikilinkIndex.backlinks[this.normalizeTarget(e)]||[];for(const i of n){t.add(i);const n=`${i}->${this.normalizeTarget(e)}`,a=this._wikilinkIndex.contexts[n];a&&!o.has(i)&&o.set(i,a)}}this._backlinks=Array.from(t).map((e=>{const n=o.get(e);return{sourceFile:e,targetFile:this._currentPath,context:(null==n?void 0:n.context)||"Context not available.",lineNumber:(null==n?void 0:n.lineNumber)||1}})),this.renderBacklinks()}extractNotebookText(e){if(!e||!e.cells||!Array.isArray(e.cells))return"";const n=e.cells.filter((e=>"markdown"===e.cell_type)),t=[];for(const e of n){let n="";"string"==typeof e.source?n=e.source:Array.isArray(e.source)?n=e.source.join(""):e.source&&(n=String(e.source)),n.trim()&&t.push(n)}return t.join("\n\n---\n\n")}extractContext(e,n){const t=e.split("\n"),o=e.substring(0,n).split("\n").length-1,i=Math.max(0,o-1),a=Math.min(t.length-1,o+1);return t.slice(i,a+1).join("\n").trim()}renderBacklinks(){if(this._container.innerHTML="",0===this._backlinks.length)return void this.showEmptyState();const e=document.createElement("div");e.className="jp-pkm-backlinks-header",e.textContent=`Backlinks (${this._backlinks.length})`,e.style.cssText="\n      font-size: 1.1rem;\n      font-weight: 600;\n      margin-bottom: 1rem;\n      color: var(--jp-ui-font-color0);\n      border-bottom: 1px solid var(--jp-border-color1);\n      padding-bottom: 0.5rem;\n    ",this._container.appendChild(e),this._backlinks.forEach((e=>{const n=document.createElement("div");n.className="jp-pkm-backlinks-item",n.style.cssText="\n        margin-bottom: 1rem;\n        padding: 0.75rem;\n        border: 1px solid var(--jp-border-color1);\n        border-radius: 4px;\n        background: var(--jp-layout-color1);\n        cursor: pointer;\n        transition: background-color 0.2s;\n      ";const t=document.createElement("div");t.className="jp-pkm-backlinks-filename",t.textContent=e.sourceFile,t.style.cssText="\n        font-weight: 600;\n        color: var(--jp-content-link-color);\n        margin-bottom: 0.5rem;\n        font-size: 0.9rem;\n      ";const o=document.createElement("div");o.className="jp-pkm-backlinks-context",o.textContent=e.context,o.style.cssText="\n        color: var(--jp-ui-font-color1);\n        font-size: 0.85rem;\n        line-height: 1.4;\n        white-space: pre-wrap;\n        max-height: 100px; /* Limit context height */\n        overflow-y: auto; /* Allow scrolling for long contexts */\n      ",n.addEventListener("click",(()=>{this.docManager.openOrReveal(e.sourceFile)})),n.addEventListener("mouseenter",(()=>{n.style.backgroundColor="var(--jp-layout-color2)"})),n.addEventListener("mouseleave",(()=>{n.style.backgroundColor="var(--jp-layout-color1)"})),n.appendChild(t),n.appendChild(o),this._container.appendChild(n)}))}refresh(){console.log("Backlinks: Manual refresh called via panel method");const e=this._currentPath;this._currentPath="",this.handleCurrentChanged().then((()=>{!this._currentPath&&e&&(this._currentPath=e,this.updateBacklinks())}))}async rebuildIndex(){console.log("Backlinks: Panel widget rebuildIndex called."),this.showLoadingState();try{await this.buildWikilinkIndex(),this.updateBacklinks()}catch(e){this.showErrorState()}}dispose(){for(const e of this._updateTimeouts.values())clearTimeout(e);this._updateTimeouts.clear(),super.dispose()}}const L={id:"@jupyterlab/pkm-extension:backlinks",description:"Display backlinks for markdown and notebook files in a side panel",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,r.INotebookTracker,s.IDocumentManager],optional:[o.ICommandPalette],activate:(e,n,t,i,a,r)=>{console.log("Backlinks plugin activated");let l=null;e.commands.addCommand(_,{label:"PKM: Toggle Backlinks Panel",caption:"Show or hide the backlinks panel",execute:()=>{if(l&&!l.isDisposed)l.isVisible?l.close():(e.shell.add(l,"right"),e.shell.activateById(l.id),l.content.refresh());else{const r=new N(e,a,n,t,i);l=new o.MainAreaWidget({content:r}),l.id="pkm-backlinks-panel",l.title.label="Backlinks",l.title.closable=!0,e.shell.add(l,"right"),e.shell.activateById(l.id),setTimeout((()=>{l&&!l.isDisposed&&l.content.refresh()}),100)}}}),e.commands.addCommand(B,{label:"PKM: Build/Rebuild Wikilink Index",caption:"Scan all files and (re)build the wikilink index.",execute:async()=>{if(console.log(`Backlinks: Command '${B}' triggered.`),l&&!l.isDisposed&&l.isVisible)console.log("Backlinks: Panel is visible, calling rebuildIndex on existing panel widget."),await l.content.rebuildIndex();else{console.log("Backlinks: Panel not visible/open or not yet created. Building index in background.");const o=new N(e,a,n,t,i);try{await o.buildWikilinkIndex(),console.log("Backlinks: Background index build completed and saved.")}catch(e){console.error("Backlinks: Error during background index build:",e),console.error("Failed to build wikilink index in background.")}finally{o.dispose()}l&&!l.isDisposed&&(console.log("Backlinks: Refreshing existing (possibly hidden) panel to load new index."),await l.content.initializeIndex())}console.log("Wikilink index build/rebuild initiated.")}}),r&&(r.addItem({command:_,category:"PKM"}),r.addItem({command:B,category:"PKM"})),e.contextMenu.addItem({command:"pkm:toggle-backlinks-panel",selector:".jp-MarkdownViewer",rank:500}),e.contextMenu.addItem({command:"pkm:toggle-backlinks-panel",selector:".jp-FileEditor",rank:500}),e.commands.addKeyBinding({command:_,keys:["Alt B"],selector:"body"});const s=document.createElement("style");s.textContent="\n      .jp-pkm-backlinks-panel { min-width: 250px; }\n      .jp-pkm-backlinks-content { font-family: var(--jp-ui-font-family); }\n      .jp-pkm-backlinks-header {\n        font-size: 1.1rem; font-weight: 600; margin-bottom: 1rem;\n        color: var(--jp-ui-font-color0); border-bottom: 1px solid var(--jp-border-color1);\n        padding-bottom: 0.5rem;\n      }\n      .jp-pkm-backlinks-empty, .jp-pkm-backlinks-loading, .jp-pkm-backlinks-error {\n        text-align: center; padding: 2rem 1rem; font-style: italic;\n      }\n      .jp-pkm-backlinks-empty, .jp-pkm-backlinks-loading { color: var(--jp-ui-font-color2); }\n      .jp-pkm-backlinks-error { color: var(--jp-error-color0); }\n      .jp-pkm-backlinks-item {\n        margin-bottom: 1rem; padding: 0.75rem; border: 1px solid var(--jp-border-color1);\n        border-radius: 4px; background: var(--jp-layout-color1);\n        cursor: pointer; transition: background-color 0.2s;\n      }\n      .jp-pkm-backlinks-item:hover { background: var(--jp-layout-color2); }\n      .jp-pkm-backlinks-filename {\n        font-weight: 600; color: var(--jp-content-link-color);\n        margin-bottom: 0.5rem; font-size: 0.9rem;\n      }\n      .jp-pkm-backlinks-context {\n        color: var(--jp-ui-font-color1); font-size: 0.85rem;\n        line-height: 1.4; white-space: pre-wrap;\n        max-height: 100px; overflow-y: auto;\n      }\n    ",document.head.appendChild(s)}},F=/!\[\[([^#\]]+)#([^\]|]+)(?:\|([^\]]+))?\]\]/g;async function A(e,n,t){try{console.log(`Attempting to extract heading "${t}" from file: ${n}`);const o=await e.services.contents.get(n,{content:!0});if("file"!==o.type)return console.warn(`File ${n} is not a file type, got: ${o.type}`),null;let i;if("string"!=typeof o.content)return o.content&&"object"==typeof o.content?(console.warn(`File ${n} content is not a string:`,typeof o.content),null):(console.warn(`File ${n} has no content`),null);i=o.content;const a=i.split("\n");console.log(`File has ${a.length} lines`),console.log("Looking for headings in file:",a.slice(0,10).map(((e,n)=>`${n}: ${e}`)));const r=t.trim().toLowerCase();let l=-1,s=0;for(let e=0;e<a.length;e++){const n=a[e].trim().match(/^(#{1,6})\s+(.+)$/);if(n){const o=n[2].trim().toLowerCase();if(console.log(`Found heading at line ${e}: "${n[2]}" (level ${n[1].length})`),o===r){l=e,s=n[1].length,console.log(`Matched heading "${t}" at line ${e}`);break}}}if(-1===l)return console.warn(`Heading "${t}" not found in ${n}`),console.log("Available headings:"),a.forEach(((e,n)=>{const t=e.match(/^(#{1,6})\s+(.+)$/);t&&console.log(`  Line ${n}: ${t[1]} ${t[2]}`)})),null;let c=a.length;for(let e=l+1;e<a.length;e++){const n=a[e].trim().match(/^(#{1,6})\s/);if(n&&n[1].length<=s){c=e;break}}const d=a.slice(l+1,c),p=d.join("\n").trim();return console.log(`Extracted ${d.length} lines of content`),console.log("First 200 chars:",p.substring(0,200)),p}catch(e){return console.error(`Error extracting heading "${t}" from ${n}:`,e),e instanceof SyntaxError&&e.message.includes("JSON.parse")&&console.warn(`File ${n} may not exist or be accessible`),null}}async function K(e,n,t){try{console.log(`Attempting to extract block ID "${t}" from file: ${n}`);const o=await e.services.contents.get(n,{content:!0});if("file"!==o.type)return console.warn(`File ${n} is not a file type, got: ${o.type}`),null;let i;if("string"!=typeof o.content)return o.content&&"object"==typeof o.content?(console.warn(`File ${n} content is not a string:`,typeof o.content),null):(console.warn(`File ${n} has no content`),null);i=o.content;const a=i.split("\n"),r=new RegExp(`\\^${t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}\\s*$`);let l=-1;console.log(`Looking for block ID pattern: ${r}`);for(let e=0;e<a.length;e++)if(r.test(a[e])){l=e,console.log(`Found block ID "${t}" at line ${e}: "${a[e]}"`);break}if(-1===l)return console.warn(`Block ID "${t}" not found in ${n}`),console.log("Available block IDs:"),a.forEach(((e,n)=>{const t=e.match(/\^([a-zA-Z0-9-_]+)\s*$/);t&&console.log(`  Line ${n}: ^${t[1]}`)})),null;let s=l;for(let e=l-1;e>=0;e--){if(""===a[e].trim()){s=e+1;break}0===e&&(s=0)}let c=l;for(let e=l+1;e<a.length;e++){if(""===a[e].trim()){c=e-1;break}e===a.length-1&&(c=e)}const d=a.slice(s,c+1),p=d.map((e=>e.replace(r,"").trimEnd())).join("\n").trim();return console.log(`Extracted block content (${d.length} lines):`,p.substring(0,200)),p}catch(e){return console.error(`Error extracting block ID "${t}" from ${n}:`,e),e instanceof SyntaxError&&e.message.includes("JSON.parse")&&console.warn(`File ${n} may not exist or be accessible`),null}}function D(e){const n=[];for(const t of e)if("stream"===t.output_type){let e="";"string"==typeof t.text?e=t.text:Array.isArray(t.text)&&(e=t.text.join("")),e.trim()&&n.push(`[${t.name||"stream"}]\n${e.trim()}`)}else if("execute_result"===t.output_type||"display_data"===t.output_type){if(t.data)if(t.data["text/plain"]){let e=t.data["text/plain"];Array.isArray(e)&&(e=e.join("")),n.push(`[result]\n${e.trim()}`)}else t.data["text/html"]?n.push(`[html]\n${t.data["text/html"]}`):t.data["image/png"]?n.push("[image: base64 PNG data]"):t.data["image/jpeg"]?n.push("[image: base64 JPEG data]"):n.push(`[data: ${Object.keys(t.data).join(", ")}]`)}else if("error"===t.output_type){const e=t.ename||"Error",o=t.evalue||"";n.push(`[error: ${e}]\n${o}`)}return n.join("\n\n")}async function z(e,n,t){const o=new Date;console.log(`Block embedding - extracting from "${n}" block/heading "${t}"`);const i=await async function(e,n){const t=e.services.contents,o=n.includes(".")?n:`${n}.md`;return console.log("Block embedding - searching for file:",n,"-> target:",o),async function e(n){try{const i=await t.get(n,{content:!0});if("directory"!==i.type||!i.content)return null;console.log(`Block embedding - searching in directory: ${n||"root"}, found ${i.content.length} items`);for(const n of i.content){if(console.log(`  - ${n.name} (${n.type})`),("file"===n.type||"notebook"===n.type)&&n.name===o)return console.log(`Block embedding - found match: ${n.path}`),n.path;if("directory"===n.type){const t=await e(n.path);if(t)return t}}}catch(e){console.error(`Block embedding - error searching directory ${n}:`,e)}return null}("")}(e,n);if(!i)return console.warn(`Block embedding - could not find file: ${n}`),{content:"",title:t,sourceFile:n,blockRef:t,extractedAt:o,found:!1};console.log(`Block embedding - resolved "${n}" to "${i}"`);const a=t.match(/^cell:(\d+)(?::(code|output|markdown|full))?$/);if(a&&i.endsWith(".ipynb")){const r=parseInt(a[1],10),l=a[2]||"full";console.log(`Notebook cell reference detected: cell ${r}, type ${l}`);const s=await async function(e,n,t,o="full"){try{console.log(`Extracting cell ${t} (${o}) from notebook: ${n}`);const i=await e.services.contents.get(n,{content:!0});if("notebook"!==i.type)return console.warn(`File ${n} is not a notebook type, got: ${i.type}`),null;let a;if(a="string"==typeof i.content?JSON.parse(i.content):i.content,!a||!a.cells||!Array.isArray(a.cells))return console.warn(`Invalid notebook structure in ${n}`),null;const r=a.cells;if(t<0||t>=r.length)return console.warn(`Cell index ${t} out of range (0-${r.length-1}) in ${n}`),null;const l=r[t],s=l.execution_count||void 0;console.log(`Found cell ${t}: type=${l.cell_type}, execution_count=${s}`);let c="";if("code"===o||"full"===o&&"code"===l.cell_type){let e="";"string"==typeof l.source?e=l.source:Array.isArray(l.source)&&(e=l.source.join("")),"code"===o?c=e:(c=e,l.outputs&&l.outputs.length>0&&(c+="\n\n\x3c!-- Output --\x3e\n",c+=D(l.outputs)))}else if("output"===o&&"code"===l.cell_type)c=l.outputs&&l.outputs.length>0?D(l.outputs):"(No output)";else{if("markdown"!==o&&"markdown"!==l.cell_type)return console.warn(`Unsupported cell type or extraction type: cell_type=${l.cell_type}, cellType=${o}`),null;"string"==typeof l.source?c=l.source:Array.isArray(l.source)&&(c=l.source.join(""))}return console.log(`Extracted cell content (${c.length} chars):`,c.substring(0,100)),{content:c.trim(),executionCount:s}}catch(e){return console.error(`Error extracting cell ${t} from ${n}:`,e),null}}(e,i,r,l);return s?{content:s.content,title:`Cell ${r}${"full"!==l?`:${l}`:""}`,sourceFile:n,blockRef:t,extractedAt:o,found:!0,isNotebookCell:!0,cellIndex:r,cellType:l,executionCount:s.executionCount}:{content:"",title:`Cell ${r}`,sourceFile:n,blockRef:t,extractedAt:o,found:!1,isNotebookCell:!0,cellIndex:r,cellType:l}}const r=/^[a-z0-9-_]+$/.test(t)&&t.includes("-");let l=null,s=t;return r?(console.log(`"${t}" looks like a block ID, trying block extraction first`),l=await K(e,i,t),null===l&&(console.log("Block ID extraction failed, trying as heading"),l=await A(e,i,t)),s=null!==l?`Block: ${t}`:t):(console.log(`"${t}" looks like a heading, trying heading extraction first`),l=await A(e,i,t),null===l&&(console.log("Heading extraction failed, trying as block ID"),l=await K(e,i,t),s=null!==l?`Block: ${t}`:t)),{content:l||"",title:s,sourceFile:n,blockRef:t,extractedAt:o,found:null!==l}}function O(e,n){const t=e.extractedAt.toLocaleString(),o=n||e.title;if(!e.found)return`\n> **${e.isNotebookCell?"üìì‚ùå":"‚ùå"} ${e.sourceFile}#${e.blockRef}**\n> \n> *${e.isNotebookCell?"Notebook cell":"Block"} not found*\n`;if(e.isNotebookCell){const n=function(e){switch(e){case"code":return"üììüíª";case"output":return"üììüìä";case"markdown":return"üììüìù";default:return"üìì"}}(e.cellType),i=void 0!==e.executionCount?` *[${e.executionCount}]*`:"",a=`**${n} ${e.sourceFile}#${o}**${i} *(üïí ${t})*`;let r="";if("code"===e.cellType||"full"===e.cellType){const n="python";if("full"===e.cellType&&e.content.includes("\x3c!-- Output --\x3e")){const t=e.content.split("\x3c!-- Output --\x3e");r=`\`\`\`${n}\n${t[0].trim()}\n\`\`\`\n\n**Output:**\n\`\`\`\n${t[1].trim()}\n\`\`\``}else r=`\`\`\`${n}\n${e.content.trim()}\n\`\`\``}else r="output"===e.cellType?`\`\`\`\n${e.content.trim()}\n\`\`\``:e.content.trim();return`\n---\n\n${a}\n\n${r}\n\n---\n`}return`\n---\n\n**üìÑ ${e.sourceFile}#${o}** *(üïí ${t})*\n\n${e.content.split("\n").map((e=>e.trim())).filter((e=>e.length>0)).join("\n\n")}\n\n---\n`}const R={id:"@jupyterlab/pkm-extension:block-embedding",description:"Handle block embedding in markdown files",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,s.IDocumentManager,f.IRenderMimeRegistry],optional:[o.ICommandPalette],activate:(e,n,t,i,a,r)=>{console.log("Block embedding plugin activated");const l=document.createElement("style");l.textContent="\n      /* Print-specific styles */\n      @media print {\n        /* Ensure embedded blocks don't break across pages */\n        .pkm-embedded-block,\n        hr + p + hr {\n          page-break-inside: avoid;\n          border: 1px solid #000 !important;\n          margin: 0.5cm 0;\n          padding: 0.3cm;\n        }\n        \n        /* Style embedded block headers for print */\n        .pkm-embedded-block-header {\n          background-color: #f5f5f5 !important;\n          -webkit-print-color-adjust: exact;\n          color-adjust: exact;\n        }\n        \n        /* Hide JupyterLab UI elements */\n        .jp-Toolbar,\n        .jp-SideBar,\n        .jp-MenuBar,\n        .jp-StatusBar {\n          display: none !important;\n        }\n        \n        /* Optimize spacing for print */\n        body {\n          margin: 0;\n          padding: 1cm;\n          font-size: 12pt;\n          line-height: 1.4;\n        }\n        \n        /* Code blocks styling for print */\n        pre, code {\n          font-size: 10pt;\n          border: 1px solid #ccc;\n          background-color: #f9f9f9 !important;\n          -webkit-print-color-adjust: exact;\n        }\n        \n        /* Ensure good contrast for print */\n        * {\n          color: #000 !important;\n        }\n        \n        /* Headers styling */\n        h1, h2, h3, h4, h5, h6 {\n          page-break-after: avoid;\n          margin-top: 0.8cm;\n          margin-bottom: 0.4cm;\n        }\n        \n        /* Prevent orphaned content */\n        p, blockquote {\n          orphans: 3;\n          widows: 3;\n        }\n      }\n      \n      /* Screen styles for embedded blocks */\n      @media screen {\n        .pkm-embedded-block {\n          border: 1px solid var(--jp-border-color2);\n          border-radius: 4px;\n          margin: 1rem 0;\n          background: var(--jp-layout-color0);\n        }\n      }\n    ",document.head.appendChild(l);const s=a.getFactory("text/markdown");s&&(a.removeMimeType("text/markdown"),a.addFactory({safe:!0,mimeTypes:["text/markdown"],createRenderer:e=>{const n=s.createRenderer(e),t=n.renderModel.bind(n);return n.renderModel=async e=>{let n;if("string"==typeof e.data)n=e.data;else if(e.data["text/markdown"])n=e.data["text/markdown"];else{if(!e.data["text/plain"])return t(e);n=e.data["text/plain"]}const o=function(e){var n;const t=[],o=[],i=/```[\s\S]*?```/g;let a;for(;null!==(a=i.exec(e));)o.push({start:a.index,end:a.index+a[0].length});const r=/`[^`]+`/g;for(;null!==(a=r.exec(e));)o.push({start:a.index,end:a.index+a[0].length});const l=e=>o.some((n=>e>=n.start&&e<n.end));let s;for(F.lastIndex=0;null!==(s=F.exec(e));)l(s.index)||t.push({fullMatch:s[0],sourceFile:s[1].trim(),blockRef:s[2].trim(),displayTitle:null===(n=s[3])||void 0===n?void 0:n.trim(),startIndex:s.index,endIndex:s.index+s[0].length});return t}(n);if(0===o.length)return t(e);console.log(`Found ${o.length} block embeds`);let a=n,r=0;for(const e of o){console.log("Processing embed:",e.sourceFile,"#",e.blockRef);const n=O(await z(i,e.sourceFile,e.blockRef),e.displayTitle),t=e.startIndex+r,o=e.endIndex+r;a=a.slice(0,t)+n+a.slice(o),r+=n.length-e.fullMatch.length}const l={...e,data:"string"==typeof e.data?{"text/markdown":a}:{...e.data,"text/markdown":a},metadata:e.metadata||{},trusted:void 0===e.trusted||e.trusted};return t(l)},n}},0)),e.commands.addCommand("pkm:print-markdown-with-embeds",{label:"PKM: Print Markdown Preview",caption:"Print the current markdown document with all embedded blocks rendered",isEnabled:()=>null!==t.currentWidget,execute:async()=>{const e=t.currentWidget;if(e)try{const n=e.content.node,t=e.title.label||"Markdown Document",o=window.open("","_blank","width=800,height=600");if(!o)return void alert("Pop-up blocked. Please allow pop-ups and try again.");const i=Array.from(document.styleSheets).map((e=>{try{return e.href?`<link rel="stylesheet" href="${e.href}">`:e.ownerNode?`<style>${Array.from(e.cssRules).map((e=>e.cssText)).join("\n")}</style>`:""}catch(n){return e.href?`<link rel="stylesheet" href="${e.href}">`:""}})).join("\n");o.document.write(`\n            <!DOCTYPE html>\n            <html>\n            <head>\n              <meta charset="utf-8">\n              <title>Print: ${t}</title>\n              ${i}\n              <style>\n                /* Additional print-specific styles */\n                @media print {\n                  @page {\n                    margin: 2cm;\n                    size: A4;\n                  }\n                  \n                  body {\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                    line-height: 1.6;\n                    color: #000;\n                    background: #fff;\n                  }\n                  \n                  /* Embedded block styling */\n                  hr + p + hr,\n                  .pkm-embedded-block {\n                    page-break-inside: avoid;\n                    border: 2px solid #333 !important;\n                    margin: 1cm 0;\n                    padding: 0.5cm;\n                    background: #f9f9f9 !important;\n                    -webkit-print-color-adjust: exact;\n                  }\n                  \n                  /* Code styling */\n                  pre {\n                    background: #f5f5f5 !important;\n                    border: 1px solid #ccc !important;\n                    padding: 0.5cm;\n                    font-size: 9pt;\n                    overflow-wrap: break-word;\n                    white-space: pre-wrap;\n                  }\n                  \n                  code {\n                    background: #f0f0f0 !important;\n                    padding: 0.1cm 0.2cm;\n                    border-radius: 2px;\n                    font-size: 10pt;\n                  }\n                  \n                  /* Typography */\n                  h1 { font-size: 20pt; margin-top: 1cm; }\n                  h2 { font-size: 16pt; margin-top: 0.8cm; }\n                  h3 { font-size: 14pt; margin-top: 0.6cm; }\n                  h4, h5, h6 { font-size: 12pt; margin-top: 0.4cm; }\n                  \n                  p { margin: 0.3cm 0; }\n                  \n                  /* Table styling */\n                  table {\n                    border-collapse: collapse;\n                    width: 100%;\n                    margin: 0.5cm 0;\n                  }\n                  \n                  th, td {\n                    border: 1px solid #333;\n                    padding: 0.2cm;\n                    text-align: left;\n                  }\n                  \n                  th {\n                    background: #e0e0e0 !important;\n                    font-weight: bold;\n                  }\n                }\n                \n                /* Hide elements that shouldn't be printed */\n                .jp-Toolbar,\n                .jp-SideBar,\n                .jp-MenuBar,\n                .jp-StatusBar,\n                .jp-Activity,\n                .jp-MainAreaWidget-toolbar {\n                  display: none !important;\n                }\n              </style>\n            </head>\n            <body>\n              <div class="print-content">\n                ${n.innerHTML}\n              </div>\n              <script>\n                // Auto-print when loaded and close after printing\n                window.onload = function() {\n                  setTimeout(function() {\n                    window.print();\n                    window.onafterprint = function() {\n                      window.close();\n                    };\n                  }, 1000);\n                };\n              <\/script>\n            </body>\n            </html>\n          `),o.document.close()}catch(e){console.error("Error printing markdown document:",e),alert("Error occurred while preparing document for printing. Check the console for details.")}else console.warn("No markdown document is currently active")}}),e.commands.addCommand("pkm:show-notebook-cell-overview",{label:"PKM: Show Notebook Cell Overview",caption:"Show an overview of all cells in the current notebook",execute:async()=>{var n;const t=e.shell.currentWidget;let r="";if(t&&(null===(n=t.context)||void 0===n?void 0:n.path)){const e=t.context.path;e.endsWith(".ipynb")&&(r=e)}if(!r){const e=prompt("Enter notebook path:","");if(!e)return;r=e}try{const n=await async function(e,n){try{console.log(`Generating cell overview for notebook: ${n}`);const t=await e.services.contents.get(n,{content:!0});if("notebook"!==t.type)return`Error: ${n} is not a notebook file.`;let o;if(o="string"==typeof t.content?JSON.parse(t.content):t.content,!o||!o.cells||!Array.isArray(o.cells))return`Error: Invalid notebook structure in ${n}`;const i=o.cells,a=[];a.push(`# üìì Notebook Cell Overview: ${n}`),a.push(`Total cells: ${i.length}\n`),a.push("| Index | Type | ID | Tags | Execution | Preview |"),a.push("|-------|------|----|----- |-----------|---------|"),i.forEach(((e,n)=>{var t,o,i;const r=e.cell_type||"unknown",l="code"===r?"üíª":"markdown"===r?"üìù":"‚ùì",s=e.id||(null===(t=e.metadata)||void 0===t?void 0:t.id)||"-",c=(null===(o=e.metadata)||void 0===o?void 0:o.tags)||[],d=c.length>0?c.join(", "):"-",p=null!==e.execution_count&&void 0!==e.execution_count?`[${e.execution_count}]`:"-";let m="";if(e.source){let n="";"string"==typeof e.source?n=e.source:Array.isArray(e.source)&&(n=e.source.join(""));const t=(null===(i=n.split("\n")[0])||void 0===i?void 0:i.trim())||"";m=t.length>40?t.substring(0,37)+"...":t,"markdown"===r&&(m=m.replace(/^#+\s*/,"").replace(/\*\*/g,""))}a.push(`| ${n} | ${l} ${r} | \`${s}\` | ${d} | ${p} | ${m} |`)})),a.push("\n## üîó Embedding Examples:"),a.push("```");const r=n.split("/").pop()||n;if(a.push(`![[${r}#cell:0]]        \x3c!-- Full cell 0 --\x3e`),a.push(`![[${r}#cell:0:code]]   \x3c!-- Code only from cell 0 --\x3e`),a.push(`![[${r}#cell:0:output]] \x3c!-- Output only from cell 0 --\x3e`),i.some((e=>{var n,t;return(null===(t=null===(n=e.metadata)||void 0===n?void 0:n.tags)||void 0===t?void 0:t.length)>0}))){const e=i.find((e=>{var n,t;return(null===(t=null===(n=e.metadata)||void 0===n?void 0:n.tags)||void 0===t?void 0:t.length)>0})).metadata.tags[0];a.push(`![[${r}#tag:${e}]]   \x3c!-- Cell with tag "${e}" (future feature) --\x3e`)}return a.push("```"),a.join("\n")}catch(e){return console.error(`Error generating cell overview for ${n}:`,e),`Error: Could not read notebook file ${n}`}}(i,r),t=new c.Widget;t.addClass("pkm-notebook-overview"),t.title.label=`Cell Overview: ${r.split("/").pop()}`,t.title.closable=!0;const l=document.createElement("div");l.style.cssText="\n            padding: 16px;\n            font-family: var(--jp-content-font-family);\n            overflow-y: auto;\n            height: 100%;\n          ";const s=a.createRenderer("text/markdown"),d={"text/markdown":n},p={};let m=!0;const u={data:d,metadata:p,trusted:m,setData:e=>{Object.assign(d,e.data||{}),Object.assign(p,e.metadata||{}),void 0!==e.trusted&&(m=e.trusted)}};s.renderModel(u).then((()=>{l.appendChild(s.node)})),t.node.appendChild(l);const h=new o.MainAreaWidget({content:t});h.title.label=t.title.label,h.title.closable=!0,e.shell.add(h,"main"),e.shell.activateById(h.id)}catch(e){console.error("Error showing notebook cell overview:",e),alert(`Error: Could not read notebook file ${r}`)}}}),e.commands.addCommand("pkm:export-to-word",{label:"PKM: Export to Word (.docx)",caption:"Export the current markdown document with embedded blocks to Word format",isEnabled:()=>null!==t.currentWidget,execute:async()=>{const e=t.currentWidget;if(e)try{const n=e.content.node,t=e.title.label||"Markdown Document",o=function(e,n){const t=e.cloneNode(!0);return t.querySelectorAll(".jp-Toolbar, .jp-SideBar, .jp-MenuBar, .jp-StatusBar, .jp-Activity").forEach((e=>e.remove())),t.querySelectorAll("hr + p + hr").forEach((e=>{const n=document.createElement("div");n.style.cssText="\n      border: 2px solid #333;\n      margin: 20px 0;\n      padding: 15px;\n      background-color: #f9f9f9;\n      page-break-inside: avoid;\n    ";const t=e.parentNode;t&&(t.insertBefore(n,e),n.appendChild(e))})),`\n    <html xmlns:o="urn:schemas-microsoft-com:office:office"\n          xmlns:w="urn:schemas-microsoft-com:office:word"\n          xmlns="http://www.w3.org/TR/REC-html40">\n    <head>\n      <meta charset="utf-8">\n      <title>${n}</title>\n      \x3c!--[if gte mso 9]>\n      <xml>\n        <w:WordDocument>\n          <w:View>Print</w:View>\n          <w:Zoom>90</w:Zoom>\n          <w:DoNotPromptForConvert/>\n          <w:DoNotShowInsertionsAndDeletions/>\n        </w:WordDocument>\n      </xml>\n      <![endif]--\x3e\n      <style>\n        /* Word-compatible styles */\n        body {\n          font-family: 'Times New Roman', serif;\n          font-size: 12pt;\n          line-height: 1.5;\n          margin: 1in;\n        }\n        \n        h1 { font-size: 18pt; font-weight: bold; margin-top: 24pt; margin-bottom: 12pt; }\n        h2 { font-size: 16pt; font-weight: bold; margin-top: 18pt; margin-bottom: 6pt; }\n        h3 { font-size: 14pt; font-weight: bold; margin-top: 12pt; margin-bottom: 6pt; }\n        h4, h5, h6 { font-size: 12pt; font-weight: bold; margin-top: 12pt; margin-bottom: 3pt; }\n        \n        p { margin-top: 6pt; margin-bottom: 6pt; }\n        \n        /* Code blocks */\n        pre {\n          font-family: 'Courier New', monospace;\n          font-size: 10pt;\n          background-color: #f5f5f5;\n          border: 1px solid #ccc;\n          padding: 12pt;\n          margin: 12pt 0;\n          white-space: pre-wrap;\n        }\n        \n        code {\n          font-family: 'Courier New', monospace;\n          font-size: 10pt;\n          background-color: #f0f0f0;\n          padding: 2pt 4pt;\n        }\n        \n        /* Embedded blocks */\n        .embedded-block {\n          border: 2px solid #333;\n          margin: 20px 0;\n          padding: 15px;\n          background-color: #f9f9f9;\n          page-break-inside: avoid;\n        }\n        \n        /* Tables */\n        table {\n          border-collapse: collapse;\n          width: 100%;\n          margin: 12pt 0;\n        }\n        \n        th, td {\n          border: 1px solid #333;\n          padding: 6pt;\n          text-align: left;\n        }\n        \n        th {\n          background-color: #e0e0e0;\n          font-weight: bold;\n        }\n        \n        /* Lists */\n        ul, ol {\n          margin: 6pt 0;\n          padding-left: 24pt;\n        }\n        \n        li {\n          margin: 3pt 0;\n        }\n        \n        /* Blockquotes */\n        blockquote {\n          margin: 12pt 24pt;\n          padding-left: 12pt;\n          border-left: 3pt solid #ccc;\n          font-style: italic;\n        }\n      </style>\n    </head>\n    <body>\n      ${t.innerHTML}\n    </body>\n    </html>\n  `}(n,t),i=new Blob([o],{type:"application/vnd.openxmlformats-officedocument.wordprocessingml.document"}),a=URL.createObjectURL(i),r=document.createElement("a");r.href=a,r.download=`${t.replace(/[^a-z0-9]/gi,"_")}.doc`,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(a)}catch(e){console.error("Error exporting to Word:",e),alert("Error occurred while exporting to Word format. Check the console for details.")}else console.warn("No markdown document is currently active")}}),r&&(r.addItem({command:"pkm:print-markdown-with-embeds",category:"PKM"}),r.addItem({command:"pkm:show-notebook-cell-overview",category:"PKM"}),r.addItem({command:"pkm:export-to-word",category:"PKM"})),e.contextMenu.addItem({command:"pkm:print-markdown-with-embeds",selector:".jp-MarkdownViewer",rank:500}),e.contextMenu.addItem({command:"pkm:export-to-word",selector:".jp-MarkdownViewer",rank:501})}},H=/!\[\[([^#\]]+\.ipynb)#([^\]]+)\]\]/g,U={id:"@jupyterlab/pkm-extension:notebook-embed",description:"Embed notebook cells in markdown files",autoStart:!0,requires:[i.IEditorTracker,a.IMarkdownViewerTracker,r.INotebookTracker,s.IDocumentManager,f.IRenderMimeRegistry],activate:(e,n,t,o,i,a)=>{console.log("Notebook embed plugin activated");const r=document.createElement("style");r.textContent="\n      .pkm-embedded-cell {\n        margin: 1rem 0;\n        border: 1px solid var(--jp-border-color2);\n        border-radius: 4px;\n        overflow: hidden;\n      }\n      \n      .pkm-embedded-cell-header {\n        background-color: var(--jp-layout-color2);\n        padding: 0.5rem;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        font-size: 0.875rem;\n      }\n      \n      .pkm-embedded-cell-source {\n        color: var(--jp-ui-font-color2);\n      }\n      \n      .pkm-embedded-cell-status {\n        color: var(--jp-ui-font-color3);\n        font-style: italic;\n      }\n      \n      .pkm-embedded-cell-status.modified {\n        color: var(--jp-warn-color1);\n      }\n      \n      .pkm-embedded-cell-content {\n        border: none !important;\n      }\n      \n      .pkm-notebook-embed-placeholder {\n        margin: 1rem 0;\n      }\n      \n      .pkm-embed-loading {\n        padding: 1rem;\n        background-color: var(--jp-layout-color1);\n        border: 1px dashed var(--jp-border-color2);\n        border-radius: 4px;\n        color: var(--jp-ui-font-color2);\n        text-align: center;\n      }\n    ",document.head.appendChild(r),t.widgetAdded.connect(((e,n)=>{n.context.ready.then((()=>{n.content.ready.then((()=>{const e=(n.content.node.textContent||"").match(H);e&&console.log("Found notebook embeds:",e)}))}))}))}},q='\n<svg class="pkm-copy-icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">\n  <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>\n  <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>\n</svg>\n',V='\n<svg class="pkm-copy-icon" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">\n  <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>\n</svg>\n',G={py:"python",js:"javascript",ts:"typescript",sh:"bash",yml:"yaml",md:"markdown",htm:"html"};function J(e){e.querySelectorAll("pre").forEach((e=>{if(e.querySelector(".pkm-code-copy-btn"))return;const n=e.querySelector("code");if(!n)return;const t=n.textContent||"";if(!t.trim())return;const o=function(e){const n=e.querySelector("code");if(n)return function(e){const n=e.className.split(" ");for(const e of n){if(e.startsWith("language-"))return e.replace("language-","");if(!e.startsWith("hljs-")&&["python","javascript","typescript","bash","shell","r","sql","json","css","html","markdown","yaml"].includes(e.toLowerCase()))return e.toLowerCase()}}(n)}(e);if(o){const n=function(e){const n=document.createElement("div"),t=G[e.toLowerCase()]||e.toLowerCase();return n.className=`pkm-code-language ${t}`,n.textContent=t,n}(o);e.appendChild(n)}const i=function(e){const n=document.createElement("button");return n.className="pkm-code-copy-btn",n.title="Copy code to clipboard",n.innerHTML=`${q}<span>Copy</span>`,n.addEventListener("click",(async t=>{t.preventDefault(),t.stopPropagation();try{await navigator.clipboard.writeText(e),n.innerHTML=`${V}<span>Copied!</span>`,n.classList.add("copied"),setTimeout((()=>{n.innerHTML=`${q}<span>Copy</span>`,n.classList.remove("copied")}),2e3)}catch(t){console.error("Failed to copy code:",t);try{const t=document.createElement("textarea");t.value=e,t.style.position="fixed",t.style.left="-999999px",t.style.top="-999999px",document.body.appendChild(t),t.focus(),t.select(),document.execCommand("copy"),document.body.removeChild(t),n.innerHTML=`${V}<span>Copied!</span>`,n.classList.add("copied"),setTimeout((()=>{n.innerHTML=`${q}<span>Copy</span>`,n.classList.remove("copied")}),2e3)}catch(e){console.error("Fallback copy failed:",e),n.innerHTML=`${q}<span>Failed</span>`,setTimeout((()=>{n.innerHTML=`${q}<span>Copy</span>`}),2e3)}}})),n}(t);e.appendChild(i),"static"===getComputedStyle(e).position&&(e.style.position="relative")}))}const Y={id:"@jupyterlab/pkm-extension:code-copy",description:"Add copy functionality to code blocks in markdown",autoStart:!0,requires:[a.IMarkdownViewerTracker,f.IRenderMimeRegistry],activate:(e,n,t)=>{console.log("Code copy plugin activated");const o=t.getFactory("text/markdown");o&&(t.removeMimeType("text/markdown"),t.addFactory({safe:!0,mimeTypes:["text/markdown"],createRenderer:e=>{const n=o.createRenderer(e),t=n.renderModel.bind(n);return n.renderModel=async e=>{const o=await t(e);return n.node&&setTimeout((()=>{J(n.node)}),100),o},n}},1)),n.widgetAdded.connect(((e,n)=>{setTimeout((()=>{n.content.node&&J(n.content.node)}),200)})),n.currentChanged.connect(((e,n)=>{n&&n.content.node&&setTimeout((()=>{J(n.content.node)}),100)})),console.log("Code copy functionality ready")}};var Q,Z=t(140);!function(e){e.showWelcome="pkm:show-welcome"}(Q||(Q={}));const X={id:"@jupyterlab/pkm-extension:welcome",description:"Creates PKM documentation and adds help command",autoStart:!0,requires:[o.ICommandPalette,Z.IFileBrowserFactory],activate:async(e,n,t)=>{console.log("PKM Welcome plugin activated"),await async function(e){try{const n=e.serviceManager.contents,t="PKM-Extension-Guide.md";try{return await n.get(t),void console.log("PKM documentation already exists")}catch(e){}await n.save(t,{type:"file",format:"text",content:'# Personal Knowledge Management (PKM) Extension Guide\n\nüéâ **The PKM Extension is now active!** This extension transforms JupyterLab into a powerful note-taking and knowledge management system.\n\n## üöÄ Quick Start\n\n1. Create a new markdown file (e.g., `start.md`)\n2. Start linking notes with wikilinks: `[[Note Name]]`\n3. Use keyboard shortcuts for quick navigation\n4. Embed notebooks and code blocks in your notes\n\n## ‚ú® Key Features\n\n### üìù Wikilinks\n- `[[Note Name]]` - Create links between notes\n- `[[note|display text]]` - Link with custom display text  \n- **Shift + Click** to follow links in editing mode\n- **Ctrl/Cmd + Click** to follow links in preview mode\n- Auto-completion for existing notes when typing `[[`\n\n### üîç Search & Navigation\n- **Alt + F** - Global search across all files\n- **Alt + B** - Show backlinks (what links to current note) (also available via context menu)\n- Full-text search across markdown files and notebooks\n- Quick navigation between connected notes\n\n### üìä Content Embedding\n- `![[notebook.ipynb#cell-id]]` - Embed specific cells from ipynb files \n- `![[file.md#heading]]` - Embed sections from markdown files\n- Live preview of embedded content\n- All markdown notes, including those with embedded content can be printed, saved to pdf, or exported to word. Turn on the note preview, then right-click for the context menu (or see the Command Palette, PKM: commands.)\n\nIn ipynb files, you can use the Cell Overview Tool to quickly see the cell id for embedding. Use `PKM: Show Notebook Cell Overview` from the command palette to see all cells with their IDs, types, and previews.\n\n### üìã Code Features\n- **Copy code blocks** from markdown with click-to-copy buttons\n- Syntax highlighting in embedded code\n- **Alt + M** - Toggle markdown preview mode\n\n### üîó Backlinks Panel\n- See all files that link to the current note\n- Automatic backlink detection\n- Navigate between related notes easily\n- FIRST TIME USE: build the backlinks index with the PKM: Build/Rebuild Wikilink Index command\n- Open/close the backlinks panel to refresh the view\n\n## ‚å®Ô∏è Keyboard Shortcuts\n\n| Shortcut | Action |\n|----------|--------|\n| **Alt + F** | Open global search |\n| **Alt + B** | Show backlinks for current file |\n| **Alt + M** | Toggle markdown preview |\n| **Shift + Click** | Follow wikilink in editor |\n| **Click** | Follow wikilink in preview/create new file from link if it doesn\'t already exist |\n\n## üìÅ File Organization Tips\n\n### Recommended Structure\n```\nyour-workspace/\n‚îú‚îÄ‚îÄ start.md              # Your main index/homepage\n‚îú‚îÄ‚îÄ projects/\n‚îÇ   ‚îú‚îÄ‚îÄ project-a.md\n‚îÇ   ‚îî‚îÄ‚îÄ project-b.md\n‚îú‚îÄ‚îÄ notes/\n‚îÇ   ‚îú‚îÄ‚îÄ meeting-notes.md\n‚îÇ   ‚îî‚îÄ‚îÄ research-ideas.md\n‚îú‚îÄ‚îÄ biblio/\n‚îÇ   ‚îú‚îÄ‚îÄ @GrahamS-2022a.md\n‚îÇ   ‚îî‚îÄ‚îÄ @GrahamS-2022b.md\n‚îú‚îÄ‚îÄ analytical_notes/\n‚îÇ   ‚îú‚îÄ‚îÄ analysis.ipynb\n‚îÇ   ‚îî‚îÄ‚îÄ data-processing.ipynb\n‚îî‚îÄ‚îÄ PKM-Extension-Guide.md # This guide\n```\n\n### Best Practices\n- Use `start.md` as your main hub/homepage\n- Create meaningful note titles for better wikilink suggestions\n- Link liberally - connections emerge over time\n- Use headings to create linkable sections\n- Embed relevant notebook outputs in your notes\n\n## üîß Advanced Usage\n\n### Block Embedding\nYou can embed specific sections of files, and use a custom title if you want:\n```markdown\n![[research-notes.md#methodology]]\n![[analysis.ipynb#results-cell]]\n![[summary#results|Key Results]]\n```\n\nYou can also indicate \n\n### Cross-referencing Notebooks and Notes\n```markdown\nIn my analysis [[data-analysis.ipynb]], I found that...\n\nThe methodology described in [[research-methods.md]] was applied...\n```\n\n### Creating a Personal Wiki\n- Start with broad topic pages\n- Link to specific project notes\n- Create index pages for different areas\n- Use consistent naming conventions\n\n## üéØ Workflow Examples\n\n### Research Workflow\n1. Create project overview in `project-overview.md`\n2. Link to relevant notebooks: `[[data-collection.ipynb]]`\n3. Reference methodology: `[[research-methods.md]]`\n4. Track progress with linked daily notes\n\n### Learning Workflow  \n1. Create topic index: `[[machine-learning.md]]`\n2. Link to specific concepts: `[[neural-networks.md]]`\n3. Embed code examples: `![[ml-examples.ipynb]]`\n4. Build concept maps with wikilinks\n\n## üÜò Troubleshooting\n\n### Links Not Working?\n- Ensure file exists in workspace\n- Check file extension (.md for markdown, .ipynb for notebooks)\n- Use exact filename in wikilinks\n\n### Search Not Finding Files?\n- Make sure files are saved\n- Check that content is in markdown or notebook format\n- Try alternative search terms\n\n### Backlinks Missing?\n- Save files to update backlink index\n- Ensure wikilinks use correct syntax: `[[filename]]`\n\n## üìö Getting Help\n\n- Access this guide anytime via Command Palette: "PKM: Open Documentation"\n- All PKM commands available in Command Palette (Cmd/Ctrl + Shift + P)\n- Look for "PKM:" prefix in command palette\n\n---\n\n**Happy note-taking!** üéâ\n\n*This file was automatically created by the PKM Extension. You can edit or delete it as needed.*\n'}),console.log("PKM documentation created: PKM-Extension-Guide.md")}catch(e){console.warn("Could not create PKM documentation:",e)}}(e),await async function(e){try{const n=e.serviceManager.contents,t="start.md";try{return await n.get(t),void console.log("start.md already exists")}catch(e){}await n.save(t,{type:"file",format:"text",content:"# Welcome to Your PKM System\n\nThis is your starting note. Try creating wikilinks:\n\n- [[My First Note]] - Creates a new note\n- [[https://example.com|External Link]] - Links to external sites\n\n## Features:\n- **Wikilinks**: Use [[Note Name]] syntax\n- **Search**: Alt+F to search all notes  \n- **Auto-save**: Your changes are saved automatically\n- **Mode Toggle**: Use the button above or Alt+M to switch between edit and preview modes\n- **Print to PDF**: Markdown previews can right-click to bring up a contextual menu item, 'PKM: Print Markdown Preview' to print (or save-as) pdf, with all embedded blocks properly rendered.\n- **Export to Word**: Markdown notes can be exported to Word, using the contextual menu item 'PKM: Export to Word'.\n- **Backlinks** See what file points to another. \n  - FIRST TIME USE: build the backlinks index with the PKM: Build/Rebuild Wikilink Index command\n  - Open/close the backlinks panel to refresh the view\n\nStart building your knowledge graph!\n\n## Quick Start Guide\nCheck out the [[PKM-Extension-Guide]] for complete documentation and advanced features.\n\n## Getting Started\n1. **Create notes**: Simply type `[[New Note Name]]` to create a link\n2. **Follow links**: Click on any wikilink to navigate or create new notes\n3. **Search everything**: Press Alt+F to search across all your notes\n4. **View connections**: Press Alt+B to see what links to the current note\n\n---\n*This file was automatically created by the PKM Extension. Feel free to edit it as your personal starting point!*\n"}),console.log("start.md created successfully")}catch(e){console.warn("Could not create start.md:",e)}}(e),e.commands.addCommand(Q.showWelcome,{label:"PKM: Open Documentation",execute:async()=>{try{await e.commands.execute("docmanager:open",{path:"PKM-Extension-Guide.md"})}catch(e){console.warn("Could not open PKM documentation:",e),alert('PKM Documentation should be available as "PKM-Extension-Guide.md" in your file browser')}}}),n.addItem({command:Q.showWelcome,category:"PKM"})}},ee=[{id:"@jupyterlab/pkm-extension:theme",description:"PKM Solarized Light Theme - Inspired by the Solarized Light color palette.",autoStart:!0,requires:[o.IThemeManager],activate:(e,n)=>{console.log("üé® PKM Theme plugin activated");const t="PKM Solarized Light";n.register({name:t,displayName:"PKM Solarized Light",isLight:!0,themeScrollbars:!0,load:()=>Promise.resolve(),unload:()=>Promise.resolve(void 0)}),n.theme!==t&&n.setTheme(t).catch((e=>{console.warn("Failed to set PKM theme:",e)})),console.log(`üé® PKM Theme "${t}" registered and activated`)}},{id:"@jupyterlab/pkm-extension:plugin",description:"Personal Knowledge Management extension for JupyterLab Desktop",autoStart:!0,requires:[o.ICommandPalette,i.IEditorTracker,a.IMarkdownViewerTracker,r.INotebookTracker],activate:(e,n,t,o,i)=>{console.log("üéâ JupyterLab PKM extension activated");const a="pkm:test-full";e.commands.addCommand(a,{label:"PKM: Test Full Extension",execute:()=>{console.log("Full PKM Extension is working!"),alert("Full PKM Extension loaded successfully!")}}),n.addItem({command:a,category:"PKM"});const r="pkm:apply-theme";e.commands.addCommand(r,{label:"PKM: Apply PKM Theme",execute:()=>{console.log("Manually applying PKM theme..."),alert("PKM Theme should already be active! Check Settings ‚Üí Theme if you need to switch themes.")}}),n.addItem({command:r,category:"PKM"})}},X,g,T,S,L,R,U,Y]}}]);